{"ast":null,"code":"var _jsxFileName = \"/Users/allisonchen/Desktop/filmdiary/client/src/components/moviePage/moviePage.js\";\n// import { Component } from \"react\";\n// import axios from \"axios\";\n// import Spinner from \"../spinner/spinner\";\n// import noPoster from '../../images/noPoster.png'\n// import clock from '../../images/clock.png'\n// import star from '../../images/star.png'\n// import FavButton from \"../favButton/favButton\";\n// import { Row, Col, Image, Container } from 'react-bootstrap';\n// import './moviePage.css'\n\n// const apikey = \"37e7a5cb2b4f66257a0b6632a59060a5\";\n\n// const POSTER_SIZE = 'w500/'\n\n// class MoviePage extends Component{\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             ID: -1,\n//             data: null,\n//             isFav: false,\n//             imgLoaded: false,\n//             server: process.env.REACT_APP_SERVER_URL || ''\n//         }\n//     }\n\n//     getData = () =>{\n//         //const URL = this.state.server+`/api/movies/getmovie/${this.state.ID}`\n//         const URL = \"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+ apikey +\"&language=en-US\"\n\n//         axios.get(URL)\n//         .then((response) => {\n//             let myGenres = ''\n//             for (let i = 0; i < response.data.genres.length-1; i++) {\n//                 myGenres += response.data.genres[i].name + ', '\n//             }\n//             myGenres += response.data.genres[response.data.genres.length-1].name\n\n//             this.setState({\n//                 data: response.data,\n//                 genres: myGenres\n//             })\n//         })\n//         .catch(err =>{\n//             console.log(err)\n//         });\n//     }\n\n//     componentDidMount = () =>{\n//         this.setState({\n//             ID: this.props.match.params.id,\n//             isFav: this.props.location.state.isFav\n//         }, () => {\n//             this.getData()\n//         })\n//     }\n\n//     render(){\n//         if (this.state.data){\n\n//             let poster_url\n//             (this.state.data.poster_path == null) ? poster_url= noPoster : poster_url = 'https://image.tmdb.org/t/p/'+POSTER_SIZE + this.state.data.poster_path\n\n//             return(\n//                 <Container fluid='lg' className='text-center movie'>\n//                     <Row xl={2} lg={1} md={1} sm={1} xs={1}>\n//                             <Col id='img'>\n//                                 <Image \n//                                     thumbnail\n//                                     src={poster_url} \n//                                     fluid className='tile-img' \n//                                     onLoad={() => this.setState({imgLoaded: true})}\n//                                     style={this.state.imgLoaded ? {} : {display: 'none'}}\n//                                 />\n//                             </Col>\n//                             <Col id='info'>\n//                                 <h1 className=\"title\">{this.state.data.title}</h1>\n//                                 <br/>\n//                                 <h4 className=\"title\">{this.state.data.overview}</h4>\n//                                 <br/>\n//                                 <h4 className=\"title\">{this.state.genres}</h4>\n//                                 <br/>\n//                                 <Row>\n//                                     <Col sm={3} className='inline-pic'>\n//                                         <h5> <img src={clock} alt='clock' style={{height: '2.0em'}}/> {parseInt(this.state.data.runtime/60)}:{this.state.data.runtime%60}</h5>\n//                                     </Col>\n//                                     <Col sm={3} className='inline-pic'>\n//                                         <h5> <img src={star} alt='star' style={{height: '2.0em'}}/> {this.state.data.vote_average.toFixed(1)}/10</h5>\n//                                     </Col>\n//                                     <Col sm={6}>\n//                                         <div className=\"d-grid gap-2\">\n//                                             {<FavButton isFav={this.state.isFav} id={this.state.ID}/>}\n//                                         </div>\n//                                     </Col>\n//                                 </Row>\n//                             </Col>\n//                      </Row>\n//                 </Container>\n//             )\n//         }\n//         else{\n//             return(<Spinner/>)\n//         }\n\n//     }\n// }\n\n// export default MoviePage\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './moviePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"37e7a5cb2b4f66257a0b6632a59060a5\";\nconst API_KEY = '79037aea';\nclass MoviePage extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      movie: {}\n    };\n  }\n  _fetchMovie(_ref) {\n    let {\n      id\n    } = _ref;\n    fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`);\n    //const URL = \"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+ apikey +\"&language=en-US\" + id\n    fetch(URL).then(res => res.json()).then(movie => {\n      console.log({\n        movie\n      });\n      this.setState({\n        movie\n      });\n    });\n  }\n  _goBack() {\n    window.history.back();\n  }\n  componentDidMount() {\n    console.log(this.props);\n    const {\n      movieId\n    } = this.props.match.params;\n    this._fetchMovie({\n      id: movieId\n    });\n  }\n  render() {\n    const {\n      Title,\n      Poster,\n      Actors,\n      Metascore,\n      Plot\n    } = this.state.movie;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: Title,\n        src: Poster\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: Plot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: Actors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: Metascore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '2em'\n        },\n        children: [movieItem.title, \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n}\nMoviePage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.object,\n    isExact: PropTypes.bool,\n    path: PropTypes.string,\n    url: PropTypes.string\n  })\n};\nexport default MoviePage;","map":{"version":3,"names":["React","Component","PropTypes","jsxDEV","_jsxDEV","apikey","API_KEY","MoviePage","constructor","arguments","state","movie","_fetchMovie","_ref","id","fetch","URL","then","res","json","console","log","setState","_goBack","window","history","back","componentDidMount","props","movieId","match","params","render","Title","Poster","Actors","Metascore","Plot","children","fileName","_jsxFileName","lineNumber","columnNumber","alt","src","style","fontSize","movieItem","title","propTypes","shape","object","isExact","bool","path","string","url"],"sources":["/Users/allisonchen/Desktop/filmdiary/client/src/components/moviePage/moviePage.js"],"sourcesContent":["// import { Component } from \"react\";\n// import axios from \"axios\";\n// import Spinner from \"../spinner/spinner\";\n// import noPoster from '../../images/noPoster.png'\n// import clock from '../../images/clock.png'\n// import star from '../../images/star.png'\n// import FavButton from \"../favButton/favButton\";\n// import { Row, Col, Image, Container } from 'react-bootstrap';\n// import './moviePage.css'\n\n// const apikey = \"37e7a5cb2b4f66257a0b6632a59060a5\";\n\n// const POSTER_SIZE = 'w500/'\n\n// class MoviePage extends Component{\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             ID: -1,\n//             data: null,\n//             isFav: false,\n//             imgLoaded: false,\n//             server: process.env.REACT_APP_SERVER_URL || ''\n//         }\n//     }\n\n//     getData = () =>{\n//         //const URL = this.state.server+`/api/movies/getmovie/${this.state.ID}`\n//         const URL = \"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+ apikey +\"&language=en-US\"\n\n//         axios.get(URL)\n//         .then((response) => {\n//             let myGenres = ''\n//             for (let i = 0; i < response.data.genres.length-1; i++) {\n//                 myGenres += response.data.genres[i].name + ', '\n//             }\n//             myGenres += response.data.genres[response.data.genres.length-1].name\n            \n//             this.setState({\n//                 data: response.data,\n//                 genres: myGenres\n//             })\n//         })\n//         .catch(err =>{\n//             console.log(err)\n//         });\n//     }\n\n//     componentDidMount = () =>{\n//         this.setState({\n//             ID: this.props.match.params.id,\n//             isFav: this.props.location.state.isFav\n//         }, () => {\n//             this.getData()\n//         })\n//     }\n\n//     render(){\n//         if (this.state.data){\n\n//             let poster_url\n//             (this.state.data.poster_path == null) ? poster_url= noPoster : poster_url = 'https://image.tmdb.org/t/p/'+POSTER_SIZE + this.state.data.poster_path\n\n//             return(\n//                 <Container fluid='lg' className='text-center movie'>\n//                     <Row xl={2} lg={1} md={1} sm={1} xs={1}>\n//                             <Col id='img'>\n//                                 <Image \n//                                     thumbnail\n//                                     src={poster_url} \n//                                     fluid className='tile-img' \n//                                     onLoad={() => this.setState({imgLoaded: true})}\n//                                     style={this.state.imgLoaded ? {} : {display: 'none'}}\n//                                 />\n//                             </Col>\n//                             <Col id='info'>\n//                                 <h1 className=\"title\">{this.state.data.title}</h1>\n//                                 <br/>\n//                                 <h4 className=\"title\">{this.state.data.overview}</h4>\n//                                 <br/>\n//                                 <h4 className=\"title\">{this.state.genres}</h4>\n//                                 <br/>\n//                                 <Row>\n//                                     <Col sm={3} className='inline-pic'>\n//                                         <h5> <img src={clock} alt='clock' style={{height: '2.0em'}}/> {parseInt(this.state.data.runtime/60)}:{this.state.data.runtime%60}</h5>\n//                                     </Col>\n//                                     <Col sm={3} className='inline-pic'>\n//                                         <h5> <img src={star} alt='star' style={{height: '2.0em'}}/> {this.state.data.vote_average.toFixed(1)}/10</h5>\n//                                     </Col>\n//                                     <Col sm={6}>\n//                                         <div className=\"d-grid gap-2\">\n//                                             {<FavButton isFav={this.state.isFav} id={this.state.ID}/>}\n//                                         </div>\n//                                     </Col>\n//                                 </Row>\n//                             </Col>\n//                      </Row>\n//                 </Container>\n//             )\n//         }\n//         else{\n//             return(<Spinner/>)\n//         }\n        \n//     }\n// }\n\n// export default MoviePage\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './moviePage.css'\n\nconst apikey = \"37e7a5cb2b4f66257a0b6632a59060a5\";\n\nconst API_KEY = '79037aea'\n\nclass MoviePage extends Component {\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.object,\n            isExact: PropTypes.bool,\n            path: PropTypes.string,\n            url: PropTypes.string\n        })\n    }\n\n    state = { movie: {} }\n\n\n    _fetchMovie ({ id }) {\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n        //const URL = \"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+ apikey +\"&language=en-US\" + id\n        fetch(URL)\n        .then(res => res.json())\n        .then( movie => {\n            console.log ({ movie })\n            this.setState({movie})\n        })\n    }\n\n    _goBack () {\n        window.history.back()\n    }\n\n    componentDidMount() {\n        console.log(this.props)\n        const { movieId } = this.props.match.params\n        this._fetchMovie({ id: movieId })\n        \n    }\n\n    render (){\n        const {Title, Poster, Actors, Metascore, Plot} = this.state.movie\n        return(\n            <div>\n                {/* <ButtonBackToHome /> */}\n                <br/>\n                <h1>{Title}</h1>\n                <img\n                    alt={Title}\n                    src={Poster}\n                />\n                <h2>{Plot}</h2>\n                <h3>{Actors}</h3>\n                <span>{Metascore}</span>\n                <span style={{fontSize:'2em'}}>{movieItem.title}  </span>\n            </div>\n        )\n    }\n}\n\nexport default MoviePage"],"mappings":"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"},"metadata":{},"sourceType":"module"}