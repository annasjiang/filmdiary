{"ast":null,"code":"import { replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections, getSectionOrder } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: utils => utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b),\n  isSameError: (a, b) => a === b,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: sections => createDateStrForInputFromSections(sections),\n  getActiveDateSections: sections => sections,\n  getActiveDateManager: (utils, state) => ({\n    activeDate: state.value,\n    referenceActiveDate: state.referenceValue,\n    getNewValueFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),\n  hasError: error => error != null,\n  getSectionOrder: (utils, localeText, format, isRTL) => getSectionOrder(splitFormatIntoSections(utils, localeText, format, null), isRTL)\n};","map":{"version":3,"names":["replaceInvalidDateByNull","addPositionPropertiesToSections","createDateStrForInputFromSections","splitFormatIntoSections","getSectionOrder","singleItemValueManager","emptyValue","getTodayValue","utils","date","cleanValue","areValuesEqual","a","b","isEqual","isSameError","defaultErrorState","singleItemFieldValueManager","updateReferenceValue","value","prevReferenceValue","isValid","getSectionsFromValue","localeText","prevSections","format","shouldReUsePrevDateSections","getValueStrFromSections","sections","getActiveDateSections","getActiveDateManager","state","activeDate","referenceActiveDate","referenceValue","getNewValueFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim","hasError","error","isRTL"],"sources":["/Users/allisonchen/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"sourcesContent":["import { replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections, getSectionOrder } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: utils => utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b),\n  isSameError: (a, b) => a === b,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: sections => createDateStrForInputFromSections(sections),\n  getActiveDateSections: sections => sections,\n  getActiveDateManager: (utils, state) => ({\n    activeDate: state.value,\n    referenceActiveDate: state.referenceValue,\n    getNewValueFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),\n  hasError: error => error != null,\n  getSectionOrder: (utils, localeText, format, isRTL) => getSectionOrder(splitFormatIntoSections(utils, localeText, format, null), isRTL)\n};"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,cAAc;AACvD,SAASC,+BAA+B,EAAEC,iCAAiC,EAAEC,uBAAuB,EAAEC,eAAe,QAAQ,kCAAkC;AAC/J,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAEC,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE;EACpCC,UAAU,EAAEV,wBAAwB;EACpCW,cAAc,EAAEA,CAACH,KAAK,EAAEI,CAAC,EAAEC,CAAC,KAAKL,KAAK,CAACM,OAAO,CAACF,CAAC,EAAEC,CAAC,CAAC;EACpDE,WAAW,EAAEA,CAACH,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;EAC9BG,iBAAiB,EAAE;AACrB,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAG;EACzCC,oBAAoB,EAAEA,CAACV,KAAK,EAAEW,KAAK,EAAEC,kBAAkB,KAAKD,KAAK,IAAI,IAAI,IAAI,CAACX,KAAK,CAACa,OAAO,CAACF,KAAK,CAAC,GAAGC,kBAAkB,GAAGD,KAAK;EAC/HG,oBAAoB,EAAEA,CAACd,KAAK,EAAEe,UAAU,EAAEC,YAAY,EAAEf,IAAI,EAAEgB,MAAM,KAAK;IACvE,MAAMC,2BAA2B,GAAG,CAAClB,KAAK,CAACa,OAAO,CAACZ,IAAI,CAAC,IAAI,CAAC,CAACe,YAAY;IAC1E,IAAIE,2BAA2B,EAAE;MAC/B,OAAOF,YAAY;IACrB;IACA,OAAOvB,+BAA+B,CAACE,uBAAuB,CAACK,KAAK,EAAEe,UAAU,EAAEE,MAAM,EAAEhB,IAAI,CAAC,CAAC;EAClG,CAAC;EACDkB,uBAAuB,EAAEC,QAAQ,IAAI1B,iCAAiC,CAAC0B,QAAQ,CAAC;EAChFC,qBAAqB,EAAED,QAAQ,IAAIA,QAAQ;EAC3CE,oBAAoB,EAAEA,CAACtB,KAAK,EAAEuB,KAAK,MAAM;IACvCC,UAAU,EAAED,KAAK,CAACZ,KAAK;IACvBc,mBAAmB,EAAEF,KAAK,CAACG,cAAc;IACzCC,4BAA4B,EAAEC,aAAa,KAAK;MAC9CjB,KAAK,EAAEiB,aAAa;MACpBF,cAAc,EAAEE,aAAa,IAAI,IAAI,IAAI,CAAC5B,KAAK,CAACa,OAAO,CAACe,aAAa,CAAC,GAAGL,KAAK,CAACG,cAAc,GAAGE;IAClG,CAAC;EACH,CAAC,CAAC;EACFC,aAAa,EAAEA,CAACC,QAAQ,EAAEJ,cAAc,EAAEK,SAAS,KAAKA,SAAS,CAACD,QAAQ,CAACE,IAAI,EAAE,EAAEN,cAAc,CAAC;EAClGO,QAAQ,EAAEC,KAAK,IAAIA,KAAK,IAAI,IAAI;EAChCtC,eAAe,EAAEA,CAACI,KAAK,EAAEe,UAAU,EAAEE,MAAM,EAAEkB,KAAK,KAAKvC,eAAe,CAACD,uBAAuB,CAACK,KAAK,EAAEe,UAAU,EAAEE,MAAM,EAAE,IAAI,CAAC,EAAEkB,KAAK;AACxI,CAAC"},"metadata":{},"sourceType":"module"}