[{"/Users/allisonchen/Desktop/filmdiary/client/src/index.js":"1","/Users/allisonchen/Desktop/filmdiary/client/src/App.js":"2","/Users/allisonchen/Desktop/filmdiary/client/src/components/navbar.js":"3","/Users/allisonchen/Desktop/filmdiary/client/src/components/edit.js":"4","/Users/allisonchen/Desktop/filmdiary/client/src/components/lists.js":"5","/Users/allisonchen/Desktop/filmdiary/client/src/components/create.js":"6","/Users/allisonchen/Desktop/filmdiary/client/src/components/diary.js":"7","/Users/allisonchen/Desktop/filmdiary/client/src/components/editList.js":"8","/Users/allisonchen/Desktop/filmdiary/client/src/components/createList.js":"9","/Users/allisonchen/Desktop/filmdiary/client/src/components/review.js":"10","/Users/allisonchen/Desktop/filmdiary/client/src/components/viewList.js":"11","/Users/allisonchen/Desktop/filmdiary/client/src/components/login.js":"12"},{"size":290,"mtime":1679845697063,"results":"13","hashOfConfig":"14"},{"size":1789,"mtime":1679859492869,"results":"15","hashOfConfig":"14"},{"size":3316,"mtime":1679845697060,"results":"16","hashOfConfig":"14"},{"size":6069,"mtime":1679845697058,"results":"17","hashOfConfig":"14"},{"size":1810,"mtime":1679845697058,"results":"18","hashOfConfig":"14"},{"size":5969,"mtime":1679845697057,"results":"19","hashOfConfig":"14"},{"size":2317,"mtime":1679845697057,"results":"20","hashOfConfig":"14"},{"size":3425,"mtime":1679845697058,"results":"21","hashOfConfig":"14"},{"size":2743,"mtime":1679845697057,"results":"22","hashOfConfig":"14"},{"size":5016,"mtime":1679845697062,"results":"23","hashOfConfig":"14"},{"size":4317,"mtime":1679845697062,"results":"24","hashOfConfig":"14"},{"size":907,"mtime":1679859152547,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1t0z139",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/allisonchen/Desktop/filmdiary/client/src/index.js",[],["59","60"],"/Users/allisonchen/Desktop/filmdiary/client/src/App.js",["61","62"],"/Users/allisonchen/Desktop/filmdiary/client/src/components/navbar.js",["63"],"import React from \"react\";\n\n// We import bootstrap to make our application look better.\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n\nimport logo from \"./logo.png\";\n\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Link } from \"react-router-dom\";\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\n// Here, we display our Navbar\nexport default function Navbar() {\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top nav-fill\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n        <a><img src={logo} width=\"25\" height=\"25\" alt=\"Film Diary\"/></a> FILM DIARY\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"/\">diary</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"/lists\">lists</a>\n          </li>\n        </ul>\n        </div>\n\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              {/* <NavLink className=\"nav-link\" to=\"/create\">\n                + LOG\n              </NavLink> */}\n              <ThemeProvider theme={theme}>\n                {/* edit/delete button */}\n                <Button color=\"success\"\n                  id=\"basic-button\"\n                  aria-controls={open ? 'basic-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={open ? 'true' : undefined}\n                  onClick={handleClick}\n                >+ NEW</Button>\n              </ThemeProvider>\n              <Menu\n                id=\"basic-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{\n                  'aria-labelledby': 'basic-button',\n                }}>\n                <Link to={`/create`} style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleClose}>Review</MenuItem></Link>\n                <Link to={`/createlist`} style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleClose}>Film List</MenuItem></Link>\n              </Menu>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/edit.js",["64"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport poster from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format } from 'date-fns';\n\nexport default function Edit() {\n  // rating and date\n  const [rating, setRating] = React.useState(null);\n  const [value1, setValue1] = React.useState(null);\n\n  const updateRating = (newRating) => {\n    setRating(newRating);\n    console.log(rating);\n  }\n\n  const dateRef = React.useRef();\n  const ratingRef = React.useRef();\n\n  // get review data from form\n  const [form, setForm] = useState({\n    name: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n      setValue1(record.date);\n      setRating(record.rating);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const d = dateRef.current.value;\n    const dt = isNaN(d) ? d : format(new Date(+d), 'MM/dd/yyyy');\n\n    const editedPerson = {\n      name: form.name,\n      review: form.review,\n      date: dt,\n      rating: ratingRef.current.value,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:4000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(`/review/${params.id.toString()}`);\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <div class=\"container\">\n      <h3>Edit Review</h3></div> <br></br>\n      <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-4 nopadding\">\n                {/* placeholder poster for now!! */}\n                <img src={poster} class=\"img-fluid\"/>\n            </div>\n            <div class=\"col\">\n              <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                  {/* film title */}\n                  <label htmlFor=\"name\">I WATCHED... </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"name\"\n                    value={form.name}\n                    onChange={(e) => updateForm({ name: e.target.value })}\n                  />\n                </div>\n\n                {/* date and rating */}\n                <div className=\"form-group row\" style={{marginLeft: 5, marginRight: 5}}>\n                  <label htmlFor=\"date\" className=\"col-form-label\">ON:</label>\n                  <div className=\"col-lg\">\n                    <input\n                      name=\"entry\"\n                      type=\"text\"\n                      value={value1}\n                      ref={dateRef}\n                      hidden\n                      readOnly\n                    />\n\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DatePicker\n                        mask=\"__/__/____\"\n                        value={value1}\n                        onChange={(newValue) => {\n                          setValue1(newValue);\n                        }}\n                        disableFuture\n                        renderInput={(params) => <TextField size=\"small\" {...params} />}\n                      />\n                    </LocalizationProvider>\n                  </div>\n\n                  <div>\n                  <input\n                      name=\"rating\"\n                      type=\"number\"\n                      value={rating}\n                      ref={ratingRef}\n                      hidden\n                      readOnly\n                    />\n\n                    <Rating\n                    name=\"simple-controlled\"\n                    defaultValue={rating}\n                    value={rating}\n                    // precision={0.5}\n                    size=\"large\"\n                    onChange={(event, newValue) => updateRating(newValue)\n                    }\n                    />\n                  </div>\n                </div>\n\n                {/* review */}\n                <div className=\"form-group\">\n                  <textarea\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"review\"\n                    rows=\"8\"\n                    value={form.review}\n                    onChange={(e) => updateForm({ review: e.target.value })}\n                  />\n                </div>\n\n                {/* cancel/submit button */}\n                <div className=\"form-group text-right\">\n                  <a href={`/review/${params.id}`} class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>                 \n                  <input\n                    type=\"submit\"\n                    value=\"SAVE\"\n                    className=\"btn btn-success\"\n                  />\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>     \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/lists.js",["65","66","67"],"import poster from './poster.jpg';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function Lists() {\n  const [lists, setLists] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // This method fetches the lists from the database.\n  useEffect(() => {\n    async function getLists() {\n      const response = await fetch(`http://localhost:4000/list/`);\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const lists = await response.json();\n      setLists(lists);\n    }\n    getLists();\n    return; \n  }, [lists.length]);\n\n  // This method will delete a list\n  async function deleteList(deleteId) {\n    await fetch(`http://localhost:4000/${deleteId}`, {\n      method: \"DELETE\"\n    });\n\n    const newLists = lists.filter((el) => el._id !== deleteId);\n    setLists(newLists);\n  }\n\n  // This method will map out the lists on the table\n  function listList() {\n    return lists.map((list) => {\n      return (\n        <List\n          list={list}\n          deleteList={() => deleteList(list._id)}\n          key={list._id}\n        />\n      );\n    });\n  }\n\n  // get reviews\n  const List = (props) => (\n    <a href={`/list/${props.list._id}`} style={{ textDecoration: 'none', color: 'black'}}>\n    <tr> \n      <td class=\"col-md-2\"><img src={poster} class=\"img-fluid\"/></td>\n      <td>\n        <b>{props.list.name}</b> <br></br>\n        <p class=\"text-muted\">{props.list.description}</p>\n      </td>\n    </tr>\n    </a>\n  );\n\n  // display reviews\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <h3>My Lists</h3>\n      <table className=\"table table-hover\" style={{ marginTop: 20 }}>\n        <tbody>{listList()}</tbody>\n      </table>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/create.js",["68","69"],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport poster from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format } from 'date-fns';\n// import Stack from '@mui/material/Stack';\n\n// import { createTheme, ThemeProvider } from '@mui/material/styles';\n\n// const theme = createTheme({\n//   palette: {\n//     neutral: {\n//       main: '#64748B',\n//       contrastText: '#fff',\n//     },\n//   },\n// });\n\nexport default function Create() {\n  // rating and date\n  const [rating, setRating] = React.useState();\n  const [value1, setValue1] = React.useState(null);\n\n  const updateRating = (newRating) => {\n    setRating(newRating);\n    console.log(rating);\n  }\n\n  const dateRef = React.useRef();\n  const ratingRef = React.useRef();\n\n  // form\n  const [form, setForm] = useState({\n    name: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n    // if no date entered, default is today's date\n    const d = isNaN(dateRef.current.value) ? dateRef.current.value : new Date();\n    var dt = new Date(+d);\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newPerson = { ...form };\n    newPerson.date = format(dt, 'MM/dd/yyyy');\n    newPerson.rating = ratingRef.current.value;\n\n    await fetch(\"http://localhost:4000/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPerson),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", review: \"\", date: \"\", rating: \"\" });\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <div class=\"container\">\n        <h3>New Review</h3>\n      </div> <br></br>\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-4 nopadding\">\n              {/* placeholder poster for now!! */}\n              <img src={poster} class=\"img-fluid\"/>\n          </div>\n        <div class=\"col\">\n          <form onSubmit={onSubmit}>\n          <div className=\"form-group\">\n            {/* title */}\n            <label htmlFor=\"name\">I WATCHED...</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"name\"\n                value={form.name}\n                onChange={(e) => updateForm({ name: e.target.value })}\n              />\n          </div>\n\n          {/* date and rating */}\n          <div className=\"form-group row\" style={{marginLeft: 5, marginRight: 5}}>\n            <label htmlFor=\"date\" className=\"col-form-label\">ON:</label>\n            <div className=\"col-lg\">\n              <input\n                name=\"entry\"\n                type=\"text\"\n                value={value1}\n                ref={dateRef}\n                hidden\n                readOnly\n              />\n\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DatePicker\n                  mask=\"__/__/____\"\n                  value={value1}\n                  onChange={(newValue) => {\n                    setValue1(newValue);\n                  }}\n                  disableFuture\n                  renderInput={(params) => <TextField size=\"small\" {...params} />}\n                />\n              </LocalizationProvider>\n            </div>\n\n            <div>\n              <input\n                name=\"rating\"\n                type=\"number\"\n                value={rating}\n                ref={ratingRef}\n                hidden\n                readOnly\n              />\n\n              <Rating\n                name=\"simple-controlled\"\n                defaultValue={0}\n                value={rating}\n                // precision={0.5}\n                size=\"large\"\n                onChange={(event, newValue) => {\n                  updateRating(newValue)\n                }}\n              />\n            </div>\n          </div>\n\n          {/* review */}\n          <div className=\"form-group\">\n            <textarea\n              type=\"text\"\n              className=\"form-control\"\n              rows=\"8\"\n              placeholder=\"ADD A REVIEW...\"\n              id=\"review\"\n              value={form.review}\n              onChange={(e) => updateForm({ review: e.target.value })}\n            />\n          </div>\n\n         {/* cancel/save */}\n          <div className=\"form-group text-right\">\n            <a href=\"/\" class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>\n            <input\n              type=\"submit\"\n              value=\"LOG\"\n              className=\"btn btn-success\"\n            />\n            {/* <Stack direction=\"row\" spacing={2}>\n            <ThemeProvider theme={theme}>\n              <Button color=\"neutral\"\n                id=\"basic-button\"\n                size=\"large\"\n                variant=\"outlined\"\n                onClick={() => {\n                  navigate(\"/\");\n                }}\n              >Cancel</Button>\n              <Button color=\"success\"\n                id=\"basic-button\"\n                type=\"submit\"\n                size=\"large\"\n                variant=\"outlined\"\n              >Log</Button>\n            </ThemeProvider>\n            </Stack> */}\n          </div>\n          </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/diary.js",["70","71","72"],"import Rating from '@mui/material/Rating';\nimport poster from './poster.jpg';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function Diary() {\n  const [records, setRecords] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:4000/record/`);\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const records = await response.json();\n      // sort by date new -> old\n      var sortedData= records.sort((function (a, b) { return new Date(b.date) - new Date(a.date) }));\n      setRecords(sortedData);\n    }\n    getRecords();\n    return; \n  }, [records.length]);\n\n  // This method will delete a record\n  async function deleteRecord(deleteId) {\n    alert(deleteId);\n    await fetch(`http://localhost:4000/${deleteId}`, {\n      method: \"DELETE\"\n    });\n\n    const newRecords = records.filter((el) => el._id !== deleteId);\n    setRecords(newRecords);\n  }\n\n  // This method will map out the records on the table\n  function recordList() {\n    return records.map((record) => {\n      return (\n        <Record\n          record={record}\n          deleteRecord={() => deleteRecord(record._id)}\n          key={record._id}\n        />\n      );\n    });\n  }\n\n  // get reviews\n  const Record = (props) => (\n    <a href={`/review/${props.record._id}`} style={{ textDecoration: 'none', color: 'black'}}>\n    <tr> \n      <td class=\"col-md-2\"><img src={poster} class=\"img-fluid\"/></td>\n      <td>\n        <b>{props.record.name}</b> <br></br>\n        <p class=\"text-muted\">watched on {props.record.date}</p>\n        <Rating\n            name=\"simple-controlled\"\n            defaultValue={props.record.rating}\n            value={props.record.rating}\n            size=\"small\"\n            readOnly/> <br></br>\n        <p>{props.record.review}</p>\n      </td>\n    </tr>\n    </a>\n  );\n\n  // display reviews\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <h3>My Diary</h3>\n      <table className=\"table table-hover\" style={{ marginTop: 20 }}>\n        <tbody>{recordList()}</tbody>\n      </table>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/editList.js",["73","74","75","76","77","78"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport poster from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format } from 'date-fns';\n\nexport default function EditList() {\n// get list data from form\nconst [form, setForm] = useState({\n  name: \"\",\n  description: \"\",\n  records: [],\n});\nconst params = useParams();\nconst navigate = useNavigate();\n\nuseEffect(() => {\n  async function fetchData() {\n    const id = params.id.toString();\n    const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const list = await response.json();\n    if (!list) {\n      window.alert(`List with id ${id} not found`);\n      navigate(\"/\");\n      return;\n    }\n\n    setForm(list);\n  }\n\n  fetchData();\n\n  return;\n}, [params.id, navigate]);\n\n// These methods will update the state properties.\nfunction updateForm(value) {\n  return setForm((prev) => {\n    return { ...prev, ...value };\n  });\n}\n\nasync function onSubmit(e) {\n  e.preventDefault();\n\n  const editedList = {\n    name: form.name,\n    description: form.description,\n  };\n\n  // This will send a post request to update the data in the database.\n  await fetch(`http://localhost:4000/updatelist/${params.id}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedList),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  });\n\n  navigate(`/list/${params.id.toString()}`);\n}\n\n// This following section will display the form that takes input from the user to update the data.\nreturn (\n  <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <form onSubmit={onSubmit}>\n    <div class=\"container\">\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.name}\n        multiline\n        rows={1}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        inputProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input text\n        InputLabelProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input label\n        onChange={e => updateForm({ name: e.target.value })}\n        type=\"text\"\n      />\n      <br></br><br></br>\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.description}\n        multiline\n        rows={3}\n        maxRows={3}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        onChange={e => updateForm({ description: e.target.value })}\n        type=\"text\"\n      />    \n    </div> <br></br>\n    <div class=\"container\"><TextField fullWidth id=\"outlined-basic\" label=\"ADD FILMS...\" variant=\"outlined\" /></div> \n    <br></br>\n\n    {/* cancel/submit button */}\n    <div className=\"form-group text-right container\">\n      <a href={`/list/${params.id}`} class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>                 \n      <input\n        type=\"submit\"\n        value=\"SAVE\"\n        className=\"btn btn-success\"\n      />\n    </div>\n    </form>\n  </div>  \n);\n}\n\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/createList.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/components/review.js",["79"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport poster from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\n\nexport default function View() {\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  // confirm delete alert\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  const handleClickOpenAlert = () => {\n    setAnchorEl(null);\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  // rating and date\n  const [rating, setRating] = React.useState(null);\n  const [value1, setValue1] = React.useState(null);\n\n  // review info\n  const [form, setForm] = useState({\n    name: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/record/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(record);\n      setValue1(record.date);\n      setRating(record.rating);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // This method will delete a record\n  async function deleteRecord(deleteId) {\n      await fetch(`http://localhost:4000/${deleteId}`, {\n          method: \"DELETE\"\n      });\n      navigate(\"/\")\n  }\n\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <div class=\"container\">\n    <h3>{form.name}\n      <div class=\"float-right\">\n        <ThemeProvider theme={theme}>\n          {/* edit/delete button */}\n          <Button color=\"neutral\"\n            id=\"basic-button\"\n            aria-controls={open ? 'basic-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >•••</Button>\n        </ThemeProvider>\n        <Menu\n          id=\"basic-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'basic-button',\n          }}>\n          <Link to={`/edit/${params.id}`} style={{ textDecoration: 'none', color: 'black'}}>\n          <MenuItem>Edit</MenuItem></Link>\n          <MenuItem onClick={handleClickOpenAlert}>Delete</MenuItem>\n        </Menu> \n      </div>\n    </h3>\n    </div>\n    <br></br>\n\n    {/* poster */}\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-4 nopadding\">\n            {/* placeholder poster for now!! */}\n            <img src={poster} class=\"img-fluid\"/>\n        </div>\n        <div class=\"col\">\n        <p class=\"text-muted\"> watched on {value1}\n          <div class=\"float-right\">\n            <Rating\n              name=\"simple-controlled\"\n              defaultValue={rating}\n              value={rating}\n              size=\"medium\"\n              readOnly/>\n          </div>\n        </p>\n        <p>{form.review}</p> \n        </div>\n      </div>\n    </div> \n\n    {/* delete confirmation alert */}\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Delete Confirmation\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete your review?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n      <ThemeProvider theme={theme}>\n        <Button color=\"neutral\" onClick={handleCloseAlert}>Cancel</Button>\n        <Button color=\"error\" onClick={() => {\n              deleteRecord(params.id);\n          }} autoFocus>\n          Delete\n        </Button>\n      </ThemeProvider>\n      </DialogActions>\n    </Dialog>    \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/viewList.js",["80","81"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport poster from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\n\nexport default function ViewList() {\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  // confirm delete alert\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  const handleClickOpenAlert = () => {\n    setAnchorEl(null);\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  // list info\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const list = await response.json();\n      if (!list) {\n        window.alert(`List with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(list);\n    //   setValue1(record.date);\n    //   setRating(record.rating);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // This method will delete a record\n  async function deleteList(deleteId) {\n      await fetch(`http://localhost:4000/delete/${deleteId}`, {\n          method: \"DELETE\"\n      });\n      navigate(\"/lists\")\n  }\n\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <div class=\"container\">\n    <h3>{form.name}\n      <div class=\"float-right\">\n        <ThemeProvider theme={theme}>\n          {/* edit/delete button */}\n          <Button color=\"neutral\"\n            id=\"basic-button\"\n            aria-controls={open ? 'basic-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >•••</Button>\n        </ThemeProvider>\n        <Menu\n          id=\"basic-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'basic-button',\n          }}>\n          <Link to={`/editlist/${params.id}`} style={{ textDecoration: 'none', color: 'black'}}>\n          <MenuItem>Edit</MenuItem></Link>\n          <MenuItem onClick={handleClickOpenAlert}>Delete</MenuItem>\n        </Menu> \n      </div>\n    </h3>\n    </div>\n    <br></br>\n    <div class=\"container\">\n        <p>{form.description}</p> \n    </div> \n\n    {/* delete confirmation alert */}\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Delete Confirmation\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete your list?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n      <ThemeProvider theme={theme}>\n        <Button color=\"neutral\" onClick={handleCloseAlert}>Cancel</Button>\n        <Button color=\"error\" onClick={() => {\n              deleteList(params.id);\n          }} autoFocus>\n          Delete\n        </Button>\n      </ThemeProvider>\n      </DialogActions>\n    </Dialog>    \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/login.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"90","line":4,"column":10,"nodeType":"88","messageId":"89","endLine":4,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":43,"column":9,"nodeType":"93","endLine":43,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":104,"column":17,"nodeType":"93","endLine":104,"endColumn":54},{"ruleId":"86","severity":1,"message":"96","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},{"ruleId":"86","severity":1,"message":"97","line":6,"column":16,"nodeType":"88","messageId":"89","endLine":6,"endColumn":23},{"ruleId":"94","severity":1,"message":"95","line":51,"column":28,"nodeType":"93","endLine":51,"endColumn":65},{"ruleId":"86","severity":1,"message":"90","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":92,"column":15,"nodeType":"93","endLine":92,"endColumn":52},{"ruleId":"86","severity":1,"message":"96","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"97","line":7,"column":16,"nodeType":"88","messageId":"89","endLine":7,"endColumn":23},{"ruleId":"94","severity":1,"message":"95","line":55,"column":28,"nodeType":"93","endLine":55,"endColumn":65},{"ruleId":"86","severity":1,"message":"98","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"86","severity":1,"message":"99","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"100","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":22},{"ruleId":"86","severity":1,"message":"101","line":8,"column":10,"nodeType":"88","messageId":"89","endLine":8,"endColumn":30},{"ruleId":"86","severity":1,"message":"102","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":20},{"ruleId":"86","severity":1,"message":"103","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":16},{"ruleId":"94","severity":1,"message":"95","line":134,"column":13,"nodeType":"93","endLine":134,"endColumn":50},{"ruleId":"86","severity":1,"message":"98","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":14},{"ruleId":"86","severity":1,"message":"99","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'poster' is defined but never used.","'Rating' is defined but never used.","'AdapterDayjs' is defined but never used.","'LocalizationProvider' is defined but never used.","'DatePicker' is defined but never used.","'format' is defined but never used.","no-global-assign","no-unsafe-negation"]