[{"/Users/allisonchen/Desktop/filmdiary/client/src/index.js":"1","/Users/allisonchen/Desktop/filmdiary/client/src/App.js":"2","/Users/allisonchen/Desktop/filmdiary/client/src/components/edit.js":"3","/Users/allisonchen/Desktop/filmdiary/client/src/components/lists.js":"4","/Users/allisonchen/Desktop/filmdiary/client/src/components/editList.js":"5","/Users/allisonchen/Desktop/filmdiary/client/src/components/viewList.js":"6","/Users/allisonchen/Desktop/filmdiary/client/src/components/create.js":"7","/Users/allisonchen/Desktop/filmdiary/client/src/components/diary.js":"8","/Users/allisonchen/Desktop/filmdiary/client/src/components/login.js":"9","/Users/allisonchen/Desktop/filmdiary/client/src/components/register.js":"10","/Users/allisonchen/Desktop/filmdiary/client/src/components/createList.js":"11","/Users/allisonchen/Desktop/filmdiary/client/src/components/reset.js":"12","/Users/allisonchen/Desktop/filmdiary/client/src/components/review.js":"13","/Users/allisonchen/Desktop/filmdiary/client/src/components/navbar.js":"14","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/search.js":"15","/Users/allisonchen/Desktop/filmdiary/client/src/components/firebase.js":"16","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/utils.js":"17","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/movies.js":"18","/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/search.js":"19","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/movie.js":"20","/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/utils.js":"21","/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/movies.js":"22","/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/movie.js":"23","/Users/allisonchen/Desktop/filmdiary/client/src/components/logout.js":"24"},{"size":290,"mtime":1680480922358,"results":"25","hashOfConfig":"26"},{"size":1868,"mtime":1680482587037,"results":"27","hashOfConfig":"26"},{"size":7256,"mtime":1680480922348,"results":"28","hashOfConfig":"26"},{"size":3094,"mtime":1680480922349,"results":"29","hashOfConfig":"26"},{"size":8899,"mtime":1680480922348,"results":"30","hashOfConfig":"26"},{"size":6880,"mtime":1680481457129,"results":"31","hashOfConfig":"26"},{"size":6032,"mtime":1680480922347,"results":"32","hashOfConfig":"26"},{"size":2266,"mtime":1680480922348,"results":"33","hashOfConfig":"26"},{"size":1483,"mtime":1680481457130,"results":"34","hashOfConfig":"26"},{"size":1676,"mtime":1680481828796,"results":"35","hashOfConfig":"26"},{"size":8355,"mtime":1680480922347,"results":"36","hashOfConfig":"26"},{"size":1132,"mtime":1680480922351,"results":"37","hashOfConfig":"26"},{"size":5559,"mtime":1680481457132,"results":"38","hashOfConfig":"26"},{"size":3613,"mtime":1680482587036,"results":"39","hashOfConfig":"26"},{"size":1933,"mtime":1680480922355,"results":"40","hashOfConfig":"26"},{"size":1851,"mtime":1680481828803,"results":"41","hashOfConfig":"26"},{"size":1130,"mtime":1680480922355,"results":"42","hashOfConfig":"26"},{"size":461,"mtime":1680480922354,"results":"43","hashOfConfig":"26"},{"size":1858,"mtime":1680480922357,"results":"44","hashOfConfig":"26"},{"size":1919,"mtime":1680480922353,"results":"45","hashOfConfig":"26"},{"size":1130,"mtime":1680480922357,"results":"46","hashOfConfig":"26"},{"size":465,"mtime":1680480922356,"results":"47","hashOfConfig":"26"},{"size":2830,"mtime":1680480922356,"results":"48","hashOfConfig":"26"},{"size":1236,"mtime":1680482587036,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dccj07",{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/allisonchen/Desktop/filmdiary/client/src/index.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/App.js",["114"],"/Users/allisonchen/Desktop/filmdiary/client/src/components/edit.js",["115"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nimport Rating from '@mui/material/Rating';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format } from 'date-fns';\n\nimport Search from \"./search/search\";\n\nexport default function Edit() {\n  // rating and date\n  const [name, setName] = React.useState();\n  const [year, setYear] = React.useState();\n  const [rating, setRating] = React.useState(null);\n  const [value1, setValue1] = React.useState(null);\n  const [posterPath, setPosterPath] = React.useState(null);\n\n  const updateRating = (newRating) => {\n    setRating(newRating);\n    console.log(rating);\n  }\n\n  const nameRef = React.useRef();\n  const dateRef = React.useRef();\n  const ratingRef = React.useRef();\n\n  // get review data from form\n  const [form, setForm] = useState({\n    name: \"\",\n    year: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n    poster: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      // set up saved values\n      setForm(record);\n      setName(record.name);\n      // trigger a click so the search bar displays the title\n      document.getElementById('searchbar').click();\n      document.getElementById('searchbar').dispatchEvent(new Event('click'));\n      setValue1(record.date);\n      setRating(record.rating);\n      setPosterPath(record.poster);\n      setYear(record.year);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const d = dateRef.current.value;\n    const dt = isNaN(d) ? d : format(new Date(+d), 'MM/dd/yyyy');\n\n    const editedPerson = {\n      name: nameRef.current.value,\n      year: document.getElementById('year-hidden').value,\n      review: form.review,\n      date: dt,\n      rating: ratingRef.current.value,\n      poster: document.getElementById('poster').src,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:4000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(`/review/${params.id.toString()}`);\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <div class=\"container\">\n      <h3>Edit Review</h3></div> <br></br>\n      <div class=\"container\">\n      <form onSubmit={onSubmit}>\n        <div class=\"row\">\n            <div class=\"col-4 nopadding\">\n                <div className=\"form-group\"><img id=\"poster\" src={posterPath} style={{width: 300}} class=\"img-fluid\"/></div>\n            </div>\n            <div class=\"col\">\n                <div className=\"form-group\">\n                  {/* film title */}\n                  <label htmlFor=\"name\">I WATCHED... </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"name-hidden\"\n                    value={name}\n                    ref={nameRef}\n                    onChange={(e) => {\n                      updateForm({ \n                        name: e.target.value, \n                        poster: document.getElementById('poster').src \n                      }); \n                    }}\n                    required\n                    hidden\n                  />\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"year-hidden\"\n                    value={year}\n                    hidden\n                  />\n                  <div>\n                    <Search/>\n                  </div>\n                </div>\n\n                {/* date and rating */}\n                <div className=\"form-group row\" style={{marginLeft: 5, marginRight: 5}}>\n                  <label htmlFor=\"date\" className=\"col-form-label\">ON:</label>\n                  <div className=\"col-lg\">\n                    <input\n                      name=\"entry\"\n                      type=\"text\"\n                      value={value1}\n                      ref={dateRef}\n                      hidden\n                      readOnly\n                    />\n\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DatePicker\n                        mask=\"__/__/____\"\n                        value={value1}\n                        onChange={(newValue) => {\n                          setValue1(newValue);\n                        }}\n                        disableFuture\n                        renderInput={(params) => <TextField size=\"small\" {...params} />}\n                      />\n                    </LocalizationProvider>\n                  </div>\n\n                  <div>\n                  <input\n                      name=\"rating\"\n                      type=\"number\"\n                      value={rating}\n                      ref={ratingRef}\n                      hidden\n                      readOnly\n                    />\n\n                    <Rating\n                    name=\"simple-controlled\"\n                    defaultValue={rating}\n                    value={rating}\n                    size=\"large\"\n                    onChange={(event, newValue) => updateRating(newValue)\n                    }\n                    />\n                  </div>\n                </div>\n\n                {/* review */}\n                <div className=\"form-group\">\n                  <textarea\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"review\"\n                    rows=\"8\"\n                    value={form.review}\n                    onChange={(e) => updateForm({ review: e.target.value })}\n                  />\n                </div>\n\n                {/* cancel/submit button */}\n                <div className=\"form-group text-right\">\n                  <a href={`/review/${params.id}`} class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>                 \n                  <input\n                    type=\"submit\"\n                    value=\"SAVE\"\n                    className=\"btn btn-success\"\n                  />\n                </div>\n            </div>\n          </div>\n          </form>\n        </div>           \n    </div>\n  );\n}","/Users/allisonchen/Desktop/filmdiary/client/src/components/lists.js",["116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React, { useEffect, useState } from \"react\";\nimport { Card, Grid, Table, TableBody, TableCell, TableContainer, TableRow, IconButton,} from \"@mui/material\";\nimport blankposter from './poster.jpg';\nimport './lists.css';\n\nexport default function Lists() {\n  const [lists, setLists] = useState([]);\n\n  // This method fetches the lists from the database.\n  useEffect(() => {\n    async function getLists() {\n      const response = await fetch(`http://localhost:4000/list/`);\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const lists = await response.json();\n      setLists(lists);\n    }\n    getLists();\n    return; \n  }, [lists.length]);\n\n  // This method will delete a list\n  async function deleteList(deleteId) {\n    await fetch(`http://localhost:4000/${deleteId}`, {\n      method: \"DELETE\"\n    });\n\n    const newLists = lists.filter((el) => el._id !== deleteId);\n    setLists(newLists);\n  }\n\n  // This method will map out the lists on the table\n  function listList() {\n    return lists.map((list) => {\n      return (\n        <List\n          list={list}\n          deleteList={() => deleteList(list._id)}\n          key={list._id}\n        />\n      );\n    });\n  }\n\n  // get reviews\n  const List = (props) => (\n    <a href={`/list/${props.list._id}`} style={{ textDecoration: 'none', color: 'black'}}>\n    <TableRow> \n      <TableCell class=\"avatars\" style={{width:210}}>\n        {/* handle thumbnails */}\n        <span class=\"avatar\">\n        {\n          props.list.thumbnail3 == \"\" ? \n          (<img src={blankposter} class=\"img-fluid\"/>) : \n          (<img src={props.list.thumbnail3} class=\"img-fluid\"/>)\n        }\n        </span>\n        <span class=\"avatar\">\n        {\n          props.list.thumbnail2 == \"\" ? \n          (<img src={blankposter} class=\"img-fluid\"/>) : \n          (<img src={props.list.thumbnail2} class=\"img-fluid\"/>)\n        }\n        </span>\n        <span class=\"avatar\">\n        {\n          props.list.thumbnail1 == \"\" ? \n          (<img src={blankposter} class=\"img-fluid\"/>) : \n          (<img src={props.list.thumbnail1} class=\"img-fluid\"/>)\n        }\n        </span>\n      </TableCell>\n\n      <TableCell class=\"listinfo\" style={{width:800}}>\n        <b>{props.list.name}</b> <br></br>\n        <p class=\"text-muted\">{props.list.description}</p>\n      </TableCell>\n    </TableRow>\n    </a>\n  );\n\n  // display reviews\n  return (\n    <div class=\"table-container\" style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <h3>My Lists</h3>\n      <div className=\"parent\">\n      {/* <Grid container> */}\n      {/* <Grid item lg={12} justifyContent=\"center\" display=\"flex\"> */}\n        {/* <Card> */}\n          {/* <TableContainer>  */}\n        <Table className=\"listtable table table-responsive table-hover\" style={{ marginTop: 20, }}>\n          <TableBody className=\"fullWidth\">{listList()}</TableBody>\n        </Table>\n        {/* </TableContainer>  */}\n        {/* </Card> */}\n      {/* </Grid> */}\n      {/* </Grid> */}\n      </div>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/editList.js",["129","130","131","132"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport TextField from '@mui/material/TextField';\nimport Search from \"./searchList/search\";\nimport { Card, Grid, Table, TableBody, TableCell, TableContainer, TableRow, IconButton,} from \"@mui/material\";\n\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport default function EditList() {\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year: \"\", poster: \"\"}\n    }\n  ]);\n\n  const generateRow = () => {\n    return {\n      id: 1,\n      item: {title: \"\", year: \"\", poster: \"\"}\n    }\n  }\n\n  const handleDeleteRow = (event, id) => {\n    setRows(rows => {\n      rows[id - 1].item[\"title\"] = \"\";\n      for (let i = id - 1; i < rows.length; i++) {\n        rows[i].id--;\n      }\n    });\n\n    setRows((prevRows) => {\n      return [\n        ...rows.slice(0, id - 1),\n        ...rows.slice(id),\n      ];\n    });\n  }\n\n  const handleChange = (e, id) => {\n    let value = e.target.value;\n    if (id === 1) {\n      if (value !== \"\") {\n        for (let i = 0; i < rows.length; i++) {\n            console.log(rows[i].id);\n            rows[i].id=i+2;\n        }\n       setRows((prevRows) => [generateRow(), ...prevRows]);\n       rows[0].item[\"title\"]=value;\n       rows[0].item[\"year\"]=document.getElementById(\"addYearToList\").value;\n       rows[0].item[\"poster\"]=document.getElementById(\"addPosterToList\").src;\n      }\n    } else if (id + 1 === rows.length) {\n      if (value === \"\") {\n        handleDeleteRow(e, id + 1);\n      }\n    }\n  }\n\n  const generateTable = () => {\n    return (\n      <Table>\n        <TableBody>\n          {rows.map((row) => \n          \n          row.id === 1 ? (\n            <TableRow\n            key={row.id}\n            sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            hidden\n            > \n            <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n              <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}}></img>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n              <TextField \n                id='addFilmToList'\n                placeholder={\"Add Item\"} \n                onClick={(e) => handleChange(e, row.id)} \n                value={row.item[\"title\"]}\n                fullWidth\n                autoComplete=\"off\"\n                variant=\"standard\"\n                InputProps={{ disableUnderline: true, readOnly: true,  }}\n              /><p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n              {\n                row.id === 1 ? (<></>) : (     //changed here\n                  <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                    <DeleteIcon />\n                  </IconButton>\n                )\n              }\n            </TableCell>\n          </TableRow>\n          ) : \n          ( \n            <TableRow\n              key={row.id}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            > \n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}}></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n                <TextField \n                  id='addFilmToList'\n                  placeholder={\"Add Item\"} \n                  onClick={(e) => handleChange(e, row.id)} \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  autoComplete=\"off\"\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500} }}\n                /><p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n                {\n                  row.id === 1 ? (<></>) : (     //changed here\n                    <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                      <DeleteIcon />\n                    </IconButton>\n                  )\n                }\n              </TableCell>\n            </TableRow>       \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n// get list data from form\nconst [form, setForm] = useState({\n  name: \"\",\n  description: \"\",\n  lists: [],\n});\nconst params = useParams();\nconst navigate = useNavigate();\n\nuseEffect(() => {\n  async function fetchData() {\n    const id = params.id.toString();\n    const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const list = await response.json();\n    if (!list) {\n      window.alert(`List with id ${id} not found`);\n      navigate(\"/\");\n      return;\n    }\n\n    setForm(list);\n\n    let sizes_arr = JSON.parse(list.list); \n   \n    let rows_arr = [];\n    rows_arr.push({\n      id: 1,\n      item: {title: \"\", poster: \"\"}\n    })\n    for (let i = 0; i < sizes_arr.length; i++) {\n      rows_arr.push({\n        id: i+2,\n        item: sizes_arr[i]\n      })\n    }\n    console.log(rows_arr);\n      \n    setRows(rows_arr);\n    setTableData(generateTable());\n  }\n\n  fetchData();\n\n  return;\n}, [params.id, navigate]);\n\n// These methods will update the state properties.\nfunction updateForm(value) {\n  return setForm((prev) => {\n    return { ...prev, ...value };\n  });\n}\n\nasync function onSubmit(e) {\n  e.preventDefault();\n\n  let arr = [];\n    // if (rows[rows.length - 1].item === \"\") {\n    if (rows[0].item[\"title\"] === \"\") {\n      arr = rows.slice(1, rows.length);\n    } else {\n      arr = rows;\n    }\n\n    let items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(arr[i].item);\n    }\n\n  const editedList = {\n    name: form.name,\n    description: form.description,\n    list: [],\n    thumbnail1: \"\",\n    thumbnail2: \"\",\n    thumbnail3: \"\",\n  };\n  editedList.list = JSON.stringify(items);\n  if (arr.length > 0) {\n    editedList.thumbnail1 = arr[0].item.poster;\n  }\n  if (arr.length > 1) {\n    editedList.thumbnail2 = arr[1].item.poster;\n  }\n  if (arr.length > 2) {\n    editedList.thumbnail3 = arr[2].item.poster;\n  }\n\n  // This will send a post request to update the data in the database.\n  await fetch(`http://localhost:4000/updatelist/${params.id}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedList),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  });\n\n  navigate(`/list/${params.id.toString()}`);\n}\n\n// This following section will display the form that takes input from the user to update the data.\nreturn (\n  <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <form onSubmit={onSubmit}>\n    <div class=\"container\">\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.name}\n        multiline\n        // rows={1}\n        maxRows={10}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        inputProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input text\n        InputLabelProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input label\n        onChange={e => updateForm({ name: e.target.value })}\n        type=\"text\"\n      />\n      <br></br><br></br>\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.description}\n        placeholder=\"ADD DESCRIPTION...\"\n        multiline\n        rows={3}\n        maxRows={3}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        onChange={e => updateForm({ description: e.target.value })}\n        type=\"text\"\n      />    \n    </div> <br></br>\n    <div class=\"container\"><Search/></div> <br></br>\n    <div class=\"container\">\n      <Grid container>\n\n        <Grid item lg={12} justifyContent=\"center\" display=\"flex\">\n          <Card>\n            <TableContainer>\n              {tableData} {/* this variable will change to contain all data */}\n            </TableContainer>\n          </Card>\n        </Grid>\n        </Grid>\n      </div>\n    <br></br>\n\n    {/* cancel/submit button */}\n    <div className=\"form-group text-right container\">\n      <a href={`/list/${params.id}`} class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>                 \n      <input\n        type=\"submit\"\n        value=\"SAVE\"\n        className=\"btn btn-success\"\n      />\n    </div>\n    </form>\n  </div>  \n);\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/viewList.js",["133","134","135","136","137","138"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\nexport default function ViewList() {\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\"}\n    }\n  ]);\n\n  const generateTable = () => {\n    return (\n      <Table>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.id}\n              sx={{ \n                '&:last-child td, &:last-child th': { border: 0 } ,\n                '&:first-child td, &:first-child th': { borderTop: 1, color: \"#dee2e6\" }\n              }}\n            >\n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}}></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n                <TextField \n                  id='addFilmToList' \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500}}}\n                />\n                <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              </TableCell>\n            </TableRow>       \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  // confirm delete alert\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  const handleClickOpenAlert = () => {\n    setAnchorEl(null);\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  // list info\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    list: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  const [user, loading, error] = useAuthState(auth);\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const list = await response.json();\n      if (!list) {\n        window.alert(`List with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(list);\n      console.log(list.list);\n\n      let sizes_arr = JSON.parse(list.list);\n      let rows_arr = [];\n      for (let i = 0; i < sizes_arr.length; i++) {\n        rows_arr.push({\n          id: i+1,\n          item: sizes_arr[i]\n        })\n      }\n        \n      setRows(rows_arr);\n      setTableData(generateTable());\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // This method will delete a record\n  async function deleteList(deleteId) {\n      await fetch(`http://localhost:4000/delete/${deleteId}`, {\n          method: \"DELETE\"\n      });\n      navigate(\"/lists\")\n  }\n\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col nopadding\">\n        <h3>{form.name}</h3>\n      </div>\n      <div className=\"col col-1\">\n        <div className\n        =\"float-right\">\n          <ThemeProvider theme={theme}>\n            {/* edit/delete button */}\n            {user && <Button color=\"neutral\"\n              id=\"basic-button\"\n              aria-controls={open ? 'basic-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >•••</Button>}\n          </ThemeProvider>\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}>\n            <Link to={`/editlist/${params.id}`} style={{ textDecoration: 'none', color: 'black'}}>\n            <MenuItem>Edit</MenuItem></Link>\n            <MenuItem onClick={handleClickOpenAlert}>Delete</MenuItem>\n          </Menu> \n        </div>\n      </div>\n    </div>    \n    </div>\n    <br></br>\n    {\n      form.description == \"\" ? (<></>) : ( \n        <div className=\"container\">\n          <p>{form.description}</p> <br></br>\n        </div>\n      )\n    }\n    <div>\n    <div className=\"container\">\n    {/* <Grid container> */}\n    {/* <Grid item lg={12} justifyContent=\"center\" display=\"flex\"> */}\n      {/* <Card> */}\n        {/* <TableContainer> */}\n          {tableData} {/* this variable will change to contain all data */}\n        {/* </TableContainer> */}\n      {/* </Card> */}\n    {/* </Grid> */}\n    {/* </Grid> */}\n    </div>\n    </div>\n\n    {/* delete confirmation alert */}\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Delete Confirmation\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete your list?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n      <ThemeProvider theme={theme}>\n        <Button color=\"neutral\" onClick={handleCloseAlert}>Cancel</Button>\n        <Button color=\"error\" onClick={() => {\n              deleteList(params.id);\n          }} autoFocus>\n          Delete\n        </Button>\n      </ThemeProvider>\n      </DialogActions>\n    </Dialog>    \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/create.js",["139","140","141","142"],"import React, { Component, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport blankposter from './poster.jpg';\n\nimport Rating from '@mui/material/Rating';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { format } from 'date-fns';\nimport dayjs from 'dayjs';\n\nimport Search from \"./search/search\";\n\nexport default function Create() {\n  // rating and date\n  const [name, setName] = React.useState();\n  const [year, setYear] = React.useState();\n  const [rating, setRating] = React.useState();\n  const [value1, setValue1] = React.useState(dayjs(new Date()));\n\n  const updateRating = (newRating) => {\n    setRating(newRating);\n  }\n\n  const nameRef = React.useRef();\n  const dateRef = React.useRef(dayjs(new Date()));\n  const ratingRef = React.useRef();\n\n  // form\n  const [form, setForm] = useState({\n    name: \"\",\n    year: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n    poster: \"\",\n  });\n  \n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n    const d = dateRef.current.value;\n    const dt = isNaN(d) ? d : format(new Date(+d), 'MM/dd/yyyy');\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newPerson = { ...form };\n    newPerson.name = nameRef.current.value;\n    newPerson.date= dt;\n    newPerson.rating = ratingRef.current.value;\n    newPerson.year = document.getElementById('year-hidden').value;\n    newPerson.poster = document.getElementById('poster').src;\n\n    await fetch(\"http://localhost:4000/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPerson),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", review: \"\", date: \"\", rating: \"\", poster: \"\" });\n    navigate(\"/diary\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <div class=\"container\">\n        <h3>New Review</h3>\n      </div> <br></br>\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-4 nopadding\">\n              {/* placeholder poster for now!! */}\n              <img id=\"poster\" src={blankposter} class=\"img-fluid\" style={{width: 300}}/>\n          </div>\n        <div class=\"col\">\n          <form onSubmit={onSubmit}>\n          <div className=\"form-group\">\n            {/* title */}\n            <label htmlFor=\"name\">I WATCHED...</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"name-hidden\"\n                value={name}\n                ref={nameRef}\n                onChange={(e) => {\n                  updateForm({ \n                    name: e.target.value, \n                    poster: document.getElementById('poster').src, \n                    year: document.getElementById('year-hidden').value \n                  }); \n                }}\n                required\n                hidden\n              />\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"year-hidden\"\n                value={year}\n                hidden\n              />\n              <div><Search /></div>\n          </div>\n\n          {/* date and rating */}\n          <div className=\"form-group row\" style={{marginLeft: 5, marginRight: 5}}>\n            <label htmlFor=\"date\" className=\"col-form-label\">ON:</label>\n            <div className=\"col-lg\">\n              <input\n                name=\"entry\"\n                type=\"text\"\n                value={value1}\n                ref={dateRef}\n                hidden\n                readOnly\n              />\n\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DatePicker\n                  mask=\"__/__/____\"\n                  defaultValue={dayjs(new Date())}                 \n                  value={value1}\n                  onChange={(newValue) => {\n                    setValue1(newValue);\n                  }}\n                  disableFuture\n                  renderInput={(params) => <TextField size=\"small\" {...params} />}\n                />\n              </LocalizationProvider>\n            </div>\n\n            <div>\n              <input\n                name=\"rating\"\n                type=\"number\"\n                value={rating}\n                ref={ratingRef}\n                hidden\n                readOnly\n              />\n\n              <Rating\n                name=\"simple-controlled\"\n                defaultValue={0}\n                value={rating}\n                size=\"large\"\n                onChange={(event, newValue) => {\n                  updateRating(newValue);\n                }}\n              />\n            </div>\n          </div>\n\n          {/* review */}\n          <div className=\"form-group\">\n            <textarea\n              type=\"text\"\n              className=\"form-control\"\n              rows=\"8\"\n              placeholder=\"ADD A REVIEW...\"\n              id=\"review\"\n              value={form.review}\n              onChange={(e) => updateForm({ review: e.target.value })}\n            />\n          </div>\n\n         {/* cancel/save */}\n          <div className=\"form-group text-right\">\n            <a href=\"/diary\" class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>\n            <input\n              type=\"submit\"\n              value=\"LOG\"\n              className=\"btn btn-success\"\n            />\n          </div>\n          </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/diary.js",["143","144","145"],"import Rating from '@mui/material/Rating';\nimport defaultposter from './search/defaultposter.jpeg';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function Diary() {\n  const [records, setRecords] = useState([]);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:4000/record/`);\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const records = await response.json();\n      setRecords(records);\n    }\n    getRecords();\n    return; \n  }, [records.length]);\n\n\n  // This method will map out the records on the table\n  function recordList() {\n    return records.map((record) => {\n      return (\n        <Record\n          record={record}\n          key={record._id}\n        />\n      );\n    });\n  }\n\n  // get reviews\n  const Record = (props) => (\n    <a href={`/review/${props.record._id}`} style={{ textDecoration: 'none', color: 'black'}}>\n    <tr> \n      {/* use thumbnails */}\n      <td class=\"col-md-2\">\n        {\n          props.record.poster == \"http://localhost:3000/static/media/defaultposter.71253f31.jpeg\" ? \n          (<img src={defaultposter} class=\"img-fluid\"/>) : \n          (<img src={`http://image.tmdb.org/t/p/w185${props.record.poster.substring(34, 250)}`} class=\"img-fluid\"/>)\n        }\n      </td>\n      <td>\n        <b style={{display: \"inline\", marginRight: 5}}>{props.record.name}</b>\n        <p className='text-muted' style={{fontSize: 14, display: \"inline\"}}>({props.record.year})</p> \n        <br></br>\n        <p class=\"text-muted\">watched on {props.record.date}</p>\n        <Rating\n            name=\"simple-controlled\"\n            defaultValue={props.record.rating}\n            value={props.record.rating}\n            size=\"small\"\n            readOnly/> <br></br>\n        <p>{props.record.review}</p>\n      </td>\n    </tr>\n    </a>\n  );\n\n  // display reviews\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <h3>My Diary</h3>\n      <table className=\"table table-hover\" style={{ marginTop: 20 }}>\n        <tbody>{recordList()}</tbody>\n      </table>\n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/login.js",["146","147"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { auth, logInWithEmailAndPassword } from \"./firebase\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport \"./login.css\";\n\nfunction Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (loading) {\n      // maybe trigger a loading screen\n      return;\n    }\n    if (user) navigate(\"/\");\n  }, [user, loading]);\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <input\n          type=\"text\"\n          className=\"login__textBox\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"E-mail Address\"\n        />\n        <input\n          type=\"password\"\n          className=\"login__textBox\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\"\n        />\n        <button\n          className=\"login__btn\"\n          onClick={() => logInWithEmailAndPassword(email, password)}\n        >\n          Login\n        </button>\n        <div>\n          <Link to=\"/reset\">Forgot Password</Link>\n        </div>\n        <div>\n          Don't have an account? <Link to=\"/register\">Register</Link> now.\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","/Users/allisonchen/Desktop/filmdiary/client/src/components/register.js",["148","149"],"import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { auth, registerWithEmailAndPassword } from \"./firebase\";\nimport \"./register.css\";\n\nfunction Register() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n\n  const register = () => {\n    if (!name) alert(\"Please enter name\");\n    registerWithEmailAndPassword(name, email, password);\n  };\n\n  useEffect(() => {\n    if (loading) return;\n    if (user) navigate(\"/\");\n  }, [user, loading]);\n\n  return (\n    <div className=\"register\">\n      <div className=\"register__container\">\n        <input\n          type=\"text\"\n          className=\"register__textBox\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Full Name\"\n        />\n        <input\n          type=\"text\"\n          className=\"register__textBox\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"E-mail Address\"\n        />\n        <input\n          type=\"password\"\n          className=\"register__textBox\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\"\n        />\n        <button className=\"register__btn\" onClick={register}>\n          Register\n        </button>\n        <div>\n          Already have an account? <Link to=\"/login\">Login</Link> now.\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Register;","/Users/allisonchen/Desktop/filmdiary/client/src/components/createList.js",["150","151","152"],"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Search from \"./searchList/search\";\nimport { Card, Grid, Table, TableBody, TableCell, TableContainer, TableRow, IconButton,} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\n\n\nexport default function CreateList() {\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\"}\n    }\n  ]);\n\n  const generateRow = () => {\n    return {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\"}\n    }\n  }\n\n  const handleDeleteRow = (event, id) => {\n    setRows(rows => {\n      rows[id - 1].item[\"title\"] = \"\";\n      for (let i = id - 1; i < rows.length; i++) {\n        rows[i].id--;\n      }\n    });\n\n    setRows((prevRows) => {\n      return [\n        ...rows.slice(0, id - 1),\n        ...rows.slice(id),\n      ];\n    });\n  }\n\n  const handleChange = (e, id) => {\n    let value = e.target.value;\n    if (id === 1) {\n      if (value !== \"\") {\n        for (let i = 0; i < rows.length; i++) {\n            rows[i].id=i+2;\n        }\n       setRows((prevRows) => [generateRow(), ...prevRows]);\n       rows[0].item[\"title\"]=value;\n       rows[0].item[\"year\"]=document.getElementById(\"addYearToList\").value;\n       rows[0].item[\"poster\"]=document.getElementById(\"addPosterToList\").src;\n      }\n    } else if (id + 1 === rows.length) {\n      if (value === \"\") {\n        handleDeleteRow(e, id + 1);\n      }\n    }\n  }\n\n  const generateTable = () => {\n    return (\n      <Table>\n        <TableBody>\n          {rows.map((row) => \n          \n          row.id === 1 ? (\n            <TableRow\n            key={row.id}\n            sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            hidden\n            > \n            <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n              <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}}></img>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n              <TextField \n                id='addFilmToList'\n                placeholder={\"Add Item\"} \n                onClick={(e) => handleChange(e, row.id)} \n                value={row.item[\"title\"]}\n                fullWidth\n                autoComplete=\"off\"\n                variant=\"standard\"\n                InputProps={{ disableUnderline: true, readOnly: true }}\n              />\n              <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n              {\n                row.id === 1 ? (<></>) : (     //changed here\n                  <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                    <DeleteIcon />\n                  </IconButton>\n                )\n              }\n            </TableCell>\n          </TableRow>\n          ) : \n          ( \n            <TableRow\n              key={row.id}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            > \n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}}></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n                <TextField \n                  id='addFilmToList'\n                  placeholder={\"Add Item\"} \n                  onClick={(e) => handleChange(e, row.id)} \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  autoComplete=\"off\"\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500}}}\n                />\n                <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n                {\n                  row.id === 1 ? (<></>) : (     //changed here\n                    <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                      <DeleteIcon />\n                    </IconButton>\n                  )\n                }\n              </TableCell>\n            </TableRow>       \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n  // form\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    list: [],\n    thumbnail1: \"\",\n    thumbnail2: \"\",\n    thumbnail3: \"\",\n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    let arr = [];\n    // if (rows[rows.length - 1].item === \"\") {\n    if (rows[0].item[\"title\"] === \"\") {\n      arr = rows.slice(1, rows.length);\n    } else {\n      arr = rows;\n    }\n\n    let items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(arr[i].item);\n    }\n\n    // set default list name\n    const n = isNaN(form.name) ? form.name : \"Untitled List\";\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newList = { ...form };\n    newList.name = n;\n    newList.list = JSON.stringify(items);\n    if (arr.length > 0) {\n      newList.thumbnail1 = arr[0].item.poster;\n    }\n    if (arr.length > 1) {\n      newList.thumbnail2 = arr[1].item.poster;\n    }\n    if (arr.length > 2) {\n      newList.thumbnail3 = arr[2].item.poster;\n    }\n    \n    await fetch(\"http://localhost:4000/list/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newList),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", description: \"\", list: \"\", thumbnail1: \"\", thumbnail2: \"\", thumbnail3: \"\" });\n    navigate(\"/lists\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <form onSubmit={onSubmit}>\n      <div className=\"container\">\n        <TextField\n          fullWidth\n          id=\"outlined-multiline-flexible\"\n          placeholder=\"New List\"\n          multiline\n          // rows={1}\n          maxRows={10}\n          variant=\"standard\"\n          InputProps={{ disableUnderline: true }}\n          inputProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input text\n          InputLabelProps={{style: {fontSize: 28, fontWeight: 500}}} // font size of input label\n          onChange={e => updateForm({ name: e.target.value })}\n          type=\"text\"\n        /> \n        <br></br><br></br>\n        <TextField\n          fullWidth\n          id=\"outlined-multiline-flexible\"\n          placeholder=\"ADD DESCRIPTION...\"\n          multiline\n          rows={3}\n          maxRows={3}\n          variant=\"standard\"\n          InputProps={{ disableUnderline: true }}\n          onChange={e => updateForm({ description: e.target.value })}\n          type=\"text\"\n        />    \n      </div> <br></br>\n      <div className=\"container\"><TextField fullWidth id=\"outlined-basic\" label=\"ADD FILMS...\" variant=\"outlined\" hidden/></div> \n      <div className=\"container\"><Search/></div> <br></br>\n      <div className=\"container\">\n      <Grid container>\n        <Grid item lg={12} justifyContent=\"center\" display=\"flex\">\n          <Card>\n            <TableContainer>\n              {tableData} {/* this variable will change to contain all data */}\n            </TableContainer>\n          </Card>\n        </Grid>\n        </Grid>\n      </div>\n      <br></br>\n      \n      <div className=\"form-group text-right container\">\n        <a href=\"/lists\" className=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>\n        <input\n          type=\"submit\"\n          value=\"SAVE\"\n          className=\"btn btn-success\"\n        />\n      </div>   \n      </form>  \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/reset.js",["153","154"],"import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { auth, sendPasswordResetEmail } from \"./firebase\";\nimport \"./reset.css\";\n\nfunction Reset() {\n  const [email, setEmail] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (loading) return;\n    if (user) navigate(\"/\");\n  }, [user, loading]);\n  return (\n    <div className=\"reset\">\n      <div className=\"reset__container\">\n        <input\n          type=\"text\"\n          className=\"reset__textBox\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"E-mail Address\"\n        />\n        <button\n          className=\"reset__btn\"\n          onClick={() => sendPasswordResetEmail(email)}\n        >\n          Send password reset email\n        </button>\n        <div>\n          Don't have an account? <Link to=\"/register\">Register</Link> now.\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Reset;","/Users/allisonchen/Desktop/filmdiary/client/src/components/review.js",["155","156","157"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nimport Rating from '@mui/material/Rating';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\nexport default function View() {\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  // confirm delete alert\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  const handleClickOpenAlert = () => {\n    setAnchorEl(null);\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  // rating and date\n  const [rating, setRating] = React.useState(null);\n  const [value1, setValue1] = React.useState(null);\n  const [posterPath, setPosterPath] = React.useState(null);\n\n  // review info\n  const [form, setForm] = useState({\n    name: \"\",\n    year: \"\",\n    review: \"\",\n    date: \"\",\n    rating: \"\",\n    poster: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  const [user, loading, error] = useAuthState(auth);\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/record/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(record);\n      setValue1(record.date);\n      setRating(record.rating);\n      setPosterPath(record.poster);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // This method will delete a record\n  async function deleteRecord(deleteId) {\n      await fetch(`http://localhost:4000/${deleteId}`, {\n          method: \"DELETE\"\n      });\n      navigate(\"/diary\")\n  }\n\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col nopadding\">\n        <h3 style={{display: \"inline\", marginRight: 10}}>{form.name}</h3>\n        <p class=\"text-muted\" style={{fontSize: 22, display: \"inline\"}}>({form.year})</p>\n      </div>\n      <div class=\"col col-sm-1\">\n      <div class=\"float-right\">\n        <ThemeProvider theme={theme}>\n          {/* edit/delete button */}\n          {user && <Button color=\"neutral\"\n            id=\"basic-button\"\n            aria-controls={open ? 'basic-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >•••</Button>}\n        </ThemeProvider>\n        <Menu\n          id=\"basic-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'basic-button',\n          }}>\n          <Link to={`/edit/${params.id}`} style={{ textDecoration: 'none', color: 'black'}}>\n          <MenuItem>Edit</MenuItem></Link>\n          <MenuItem onClick={handleClickOpenAlert}>Delete</MenuItem>\n        </Menu> \n      </div>\n      </div>\n      </div>\n    </div>\n    <br></br>\n\n    {/* poster */}\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-4 nopadding\">\n            {/* placeholder poster for now!! */}\n            <img src={posterPath} style={{width: 300}} class=\"img-fluid\"/>\n        </div>\n        <div class=\"col\">\n        <p class=\"text-muted\"> watched on {value1}\n          <div class=\"float-right\">\n            <Rating\n              name=\"simple-controlled\"\n              defaultValue={rating}\n              value={rating}\n              size=\"medium\"\n              readOnly/>\n          </div>\n        </p>\n        <p>{form.review}</p> \n        </div>\n      </div>\n    </div> \n\n    {/* delete confirmation alert */}\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Delete Confirmation\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete your review?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n      <ThemeProvider theme={theme}>\n        <Button color=\"neutral\" onClick={handleCloseAlert}>Cancel</Button>\n        <Button color=\"error\" onClick={() => {\n              deleteRecord(params.id);\n          }} autoFocus>\n          Delete\n        </Button>\n      </ThemeProvider>\n      </DialogActions>\n    </Dialog>    \n    </div>\n  );\n}\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/navbar.js",["158","159","160"],"/Users/allisonchen/Desktop/filmdiary/client/src/components/search/search.js",["161","162","163","164"],"import React, { Component, useState, useRef } from 'react';\nimport axios from 'axios';\n\nimport Movies from './movies';\nimport { search } from './utils';\nimport TextField from '@mui/material/TextField';\n\nclass Search extends Component {\n  state = {\n    movies: null,\n    loading: false,\n    value: ''\n  };\n\n  search = async val => {\n    this.setState({ loading: true });\n    const res = await axios(\n      `https://api.themoviedb.org/3/search/movie?query=${val}&api_key=dbc0a6d62448554c27b6167ef7dabb1b`\n    );\n    const movies = await res.data.results;\n\n    this.setState({ movies, loading: false });\n  };\n\n  onChangeHandler = async e => {\n    this.search(e.target.value);\n    this.setState({ value: e.target.value });\n  };\n\n  onClickHandler = async e => {\n    this.setState({ value: document.getElementById('name-hidden').value });\n  };\n\n  get renderMovies() {\n    if (this.state.movies) {\n      return <Movies list={this.state.movies} />;\n    }\n  }\n\n  render() {\n    return (\n      <div style={{margin: 0}}>\n      \t{/* <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}> */}\n        {/* <input\n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          placeholder=\"Search Here\"\n        /> */}\n        <TextField\n          fullWidth\n          id=\"searchbar\"\n          variant=\"outlined\" \n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          onClick={(e) => {\n            this.onClickHandler(e);\n            // allow search again\n            if (document.getElementById('searchresults')) {\n              document.getElementById('searchresults').style.visibility = \"visible\";\n            }           \n          }}\n          placeholder=\"Search for Films...\"\n          required\n          size=\"small\"\n          autoComplete='off'\n        />\n        <div>{this.renderMovies}</div>\n      </div>\n\t  // </div>\n    );\n  }\n}\n\nexport default Search;","/Users/allisonchen/Desktop/filmdiary/client/src/components/firebase.js",["165","166","167","168","169"],"import { initializeApp } from \"firebase/app\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB4JoS0HRvOYHgGf15GdSrVRtw3nnGK7js\",\n  authDomain: \"film-diary-a93cf.firebaseapp.com\",\n  projectId: \"film-diary-a93cf\",\n  storageBucket: \"film-diary-a93cf.appspot.com\",\n  messagingSenderId: \"1055949210781\",\n  appId: \"1:1055949210781:web:9232c05704a58fb1b70074\",\n  measurementId: \"G-3TKKXKYFP7\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email,\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport {\n  auth,\n  db,\n  logInWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  registerWithEmailAndPassword,\n  sendPasswordResetEmail,\n  sendPasswordReset,\n  logout,\n};","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/utils.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/components/search/movies.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/search.js",["170","171","172","173"],"import React, { Component, useState, useRef } from 'react';\nimport axios from 'axios';\n\nimport Movies from './movies';\nimport { search } from './utils';\nimport TextField from '@mui/material/TextField';\n\nclass Search extends Component {\n  state = {\n    movies: null,\n    loading: false,\n    value: ''\n  };\n\n  search = async val => {\n    this.setState({ loading: true });\n    const res = await axios(\n      `https://api.themoviedb.org/3/search/movie?query=${val}&api_key=dbc0a6d62448554c27b6167ef7dabb1b`\n    );\n    const movies = await res.data.results;\n\n    this.setState({ movies, loading: false });\n  };\n\n  onChangeHandler = async e => {\n    this.search(e.target.value);\n    this.setState({ value: e.target.value });\n  };\n\n  onClickHandler = async e => {\n    this.search(\"\");\n    this.setState({ value: \"\" });\n  };\n\n  get renderMovies() {\n    if (this.state.movies) {\n      return <Movies list={this.state.movies} />;\n    }\n  }\n\n  render() {\n    return (\n      <div style={{margin: 0}}>\n      \t{/* <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}> */}\n        {/* <input\n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          placeholder=\"Search Here\"\n        /> */}\n        <TextField\n          fullWidth\n          id=\"searchbar\"\n          variant=\"outlined\" \n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          onClick={(e) => {\n            this.onClickHandler(e);\n            // allow search again\n            if (document.getElementById('searchresultsList')) {\n              document.getElementById('searchresultsList').style.visibility = \"visible\";\n            }           \n          }}\n          placeholder=\"Add Films...\"\n          autoComplete='off'\n        />\n        <div>{this.renderMovies}</div>\n      </div>\n    );\n  }\n}\n\nexport default Search;","/Users/allisonchen/Desktop/filmdiary/client/src/components/search/movie.js",["174","175","176","177","178","179","180","181","182","183"],"import React, { useState } from \"react\";\nimport defaultposter from './defaultposter.jpeg';\nimport * as ReactDOM from 'react-dom';\nimport Search from \"./search\";\nimport Movies from \"./movies\";\n\nimport classes from \"./movie.module.css\";\nimport { truncStr } from \"./utils\";\n\nconst MovieCard = props => {\n  const { title, poster_path, id, release_date} = props.item;\n  const posterthumb = poster_path != null ? `http://image.tmdb.org/t/p/w185${poster_path}` : defaultposter;\n  const poster = poster_path != null ? `http://image.tmdb.org/t/p/original${poster_path}` : defaultposter;\n\n  const year = release_date.substring(0, 4);\n\n  var selectedTitle = React.useRef();\n\n  function triggerInput(enteredName, enteredValue) {\n    const input = document.getElementById(enteredName); \n    const lastValue = input.value;\n    input.value = enteredValue;\n    const event = new Event(\"input\", { bubbles: true });\n    const tracker = input._valueTracker;\n    if (tracker) {\n      tracker.setValue(lastValue);\n    }\n    input.dispatchEvent(event);\n  }\n\n  return (\n    <tr onClick={() => {\n      // set search bar to official title\n      document.getElementById('searchbar').value = title;\n\n      // update the hidden name thing and poster for the form\n      document.getElementById('name-hidden').value = title;\n      document.getElementById('year-hidden').value = year;\n      document.getElementById('poster').src = poster;\n\n      // trigger the onclick function so the title stays\n      document.getElementById('searchbar').click();\n      document.getElementById('searchbar').dispatchEvent(new Event('click'));\n\n      // hide after selecting search result\n      document.getElementById('searchresults').style.visibility = \"hidden\";\n    }}>\n      <td class=\"col-sm-1\"><img src={posterthumb} style={{height: 80}}></img></td>\n      <td><b>{title}</b> <p class=\"text-muted\">({year})</p></td>\n    </tr>\n  );\n\n};\n\nexport default MovieCard;\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/utils.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/movies.js",[],"/Users/allisonchen/Desktop/filmdiary/client/src/components/searchList/movie.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"import React, { useState } from \"react\";\nimport defaultposter from './defaultposter.jpeg';\nimport * as ReactDOM from 'react-dom';\nimport Search from \"./search\";\nimport Movies from \"./movies\";\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport deleteicon from \"./deleteicon.png\";\n\nimport classes from \"./movie.module.css\";\nimport { truncStr } from \"./utils\";\n\nconst MovieCard = props => {\n  const { title, poster_path, id, release_date} = props.item;\n  const posterthumb = poster_path != null ? `http://image.tmdb.org/t/p/w185${poster_path}` : defaultposter;\n  const poster = poster_path != null ? `http://image.tmdb.org/t/p/original${poster_path}` : defaultposter;\n\n  const year = release_date.substring(0, 4);\n\n  var selectedTitle = React.useRef();\n\n  function triggerInput(enteredName, enteredValue) {\n    const input = document.getElementById(enteredName); \n    const lastValue = input.value;\n    input.value = enteredValue;\n    const event = new Event(\"input\", { bubbles: true });\n    const tracker = input._valueTracker;\n    if (tracker) {\n      tracker.setValue(lastValue);\n    }\n    input.dispatchEvent(event);\n  }\n\n  function deleteRow(row) {\n    var i = row.parentNode.parentNode.rowIndex;\n    document.getElementById('buildinglist').deleteRow(i);\n  }\n  \n  function insRow() {\n    // console.log('hi');\n    var x = document.getElementById('buildinglist');\n    var new_row = x.rows[1];\n    var len = x.rows.length;\n    new_row.cells[0].innerHTML = len;\n  \n    var inp1 = new_row.cells[1].getElementsByTagName('input')[0];\n    inp1.id += len;\n    inp1.value = '';\n    var inp2 = new_row.cells[2].getElementsByTagName('input')[0];\n    inp2.id += len;\n    inp2.value = '';\n    x.appendChild(new_row);\n  }\n\n  return (\n    <tr onClick={() => {\n      // reset search bar to blank\n      document.getElementById('searchbar').value = \"\";\n\n      // trigger the onclick function so the title stays\n      document.getElementById('searchbar').click();\n      document.getElementById('searchbar').dispatchEvent(new Event('click'));\n\n      document.getElementById('addFilmToList').value = title;\n      document.getElementById('addYearToList').value = year;\n      document.getElementById('addPosterToList').src = posterthumb;\n      document.getElementById('addPosterToList').style.height = \"100px\";\n      document.getElementById('addFilmToList').click();\n      document.getElementById('addFilmToList').dispatchEvent(new Event('click'));\n      \n      // hide after selecting search result\n      document.getElementById('searchresultsList').style.visibility = \"hidden\";\n    }}>\n      <td className=\"col-sm-1\"><img src={posterthumb} style={{height: 80}}></img></td>\n      <td><b>{title}</b> <p className=\"text-muted\">({year})</p></td>\n    </tr>\n  );\n\n};\n\nexport default MovieCard;\n","/Users/allisonchen/Desktop/filmdiary/client/src/components/logout.js",["200","201"],{"ruleId":"202","severity":1,"message":"203","line":6,"column":25,"nodeType":"204","messageId":"205","endLine":6,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":120,"column":45,"nodeType":"208","endLine":120,"endColumn":119},{"ruleId":"202","severity":1,"message":"209","line":2,"column":10,"nodeType":"204","messageId":"205","endLine":2,"endColumn":14},{"ruleId":"202","severity":1,"message":"210","line":2,"column":16,"nodeType":"204","messageId":"205","endLine":2,"endColumn":20},{"ruleId":"202","severity":1,"message":"211","line":2,"column":51,"nodeType":"204","messageId":"205","endLine":2,"endColumn":65},{"ruleId":"202","severity":1,"message":"212","line":2,"column":77,"nodeType":"204","messageId":"205","endLine":2,"endColumn":87},{"ruleId":"213","severity":1,"message":"214","line":56,"column":33,"nodeType":"215","messageId":"216","endLine":56,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":57,"column":12,"nodeType":"208","endLine":57,"endColumn":54},{"ruleId":"206","severity":1,"message":"207","line":58,"column":12,"nodeType":"208","endLine":58,"endColumn":64},{"ruleId":"213","severity":1,"message":"214","line":63,"column":33,"nodeType":"215","messageId":"216","endLine":63,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":64,"column":12,"nodeType":"208","endLine":64,"endColumn":54},{"ruleId":"206","severity":1,"message":"207","line":65,"column":12,"nodeType":"208","endLine":65,"endColumn":64},{"ruleId":"213","severity":1,"message":"214","line":70,"column":33,"nodeType":"215","messageId":"216","endLine":70,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":71,"column":12,"nodeType":"208","endLine":71,"endColumn":54},{"ruleId":"206","severity":1,"message":"207","line":72,"column":12,"nodeType":"208","endLine":72,"endColumn":64},{"ruleId":"206","severity":1,"message":"207","line":74,"column":15,"nodeType":"208","endLine":74,"endColumn":88},{"ruleId":"206","severity":1,"message":"207","line":105,"column":17,"nodeType":"208","endLine":105,"endColumn":90},{"ruleId":"217","severity":1,"message":"218","line":138,"column":6,"nodeType":"219","endLine":138,"endColumn":12,"suggestions":"220"},{"ruleId":"217","severity":1,"message":"218","line":191,"column":4,"nodeType":"219","endLine":191,"endColumn":25,"suggestions":"221"},{"ruleId":"206","severity":1,"message":"207","line":51,"column":17,"nodeType":"208","endLine":51,"endColumn":90},{"ruleId":"217","severity":1,"message":"218","line":73,"column":6,"nodeType":"219","endLine":73,"endColumn":12,"suggestions":"222"},{"ruleId":"202","severity":1,"message":"223","line":105,"column":16,"nodeType":"204","messageId":"205","endLine":105,"endColumn":23},{"ruleId":"202","severity":1,"message":"224","line":105,"column":25,"nodeType":"204","messageId":"205","endLine":105,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":139,"column":6,"nodeType":"219","endLine":139,"endColumn":27,"suggestions":"225"},{"ruleId":"213","severity":1,"message":"214","line":187,"column":24,"nodeType":"215","messageId":"216","endLine":187,"endColumn":26},{"ruleId":"202","severity":1,"message":"226","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":26},{"ruleId":"202","severity":1,"message":"227","line":17,"column":16,"nodeType":"204","messageId":"205","endLine":17,"endColumn":23},{"ruleId":"202","severity":1,"message":"228","line":18,"column":16,"nodeType":"204","messageId":"205","endLine":18,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":89,"column":15,"nodeType":"208","endLine":89,"endColumn":90},{"ruleId":"213","severity":1,"message":"214","line":44,"column":31,"nodeType":"215","messageId":"216","endLine":44,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":45,"column":12,"nodeType":"208","endLine":45,"endColumn":56},{"ruleId":"206","severity":1,"message":"207","line":46,"column":12,"nodeType":"208","endLine":46,"endColumn":116},{"ruleId":"202","severity":1,"message":"224","line":10,"column":25,"nodeType":"204","messageId":"205","endLine":10,"endColumn":30},{"ruleId":"217","severity":1,"message":"229","line":19,"column":6,"nodeType":"219","endLine":19,"endColumn":21,"suggestions":"230"},{"ruleId":"202","severity":1,"message":"224","line":11,"column":25,"nodeType":"204","messageId":"205","endLine":11,"endColumn":30},{"ruleId":"217","severity":1,"message":"229","line":22,"column":6,"nodeType":"219","endLine":22,"endColumn":21,"suggestions":"231"},{"ruleId":"206","severity":1,"message":"207","line":73,"column":15,"nodeType":"208","endLine":73,"endColumn":88},{"ruleId":"206","severity":1,"message":"207","line":105,"column":17,"nodeType":"208","endLine":105,"endColumn":90},{"ruleId":"217","severity":1,"message":"218","line":139,"column":6,"nodeType":"219","endLine":139,"endColumn":12,"suggestions":"232"},{"ruleId":"202","severity":1,"message":"224","line":10,"column":25,"nodeType":"204","messageId":"205","endLine":10,"endColumn":30},{"ruleId":"217","severity":1,"message":"229","line":15,"column":6,"nodeType":"219","endLine":15,"endColumn":21,"suggestions":"233"},{"ruleId":"202","severity":1,"message":"223","line":69,"column":16,"nodeType":"204","messageId":"205","endLine":69,"endColumn":23},{"ruleId":"202","severity":1,"message":"224","line":69,"column":25,"nodeType":"204","messageId":"205","endLine":69,"endColumn":30},{"ruleId":"206","severity":1,"message":"207","line":146,"column":13,"nodeType":"208","endLine":146,"endColumn":75},{"ruleId":"202","severity":1,"message":"223","line":38,"column":16,"nodeType":"204","messageId":"205","endLine":38,"endColumn":23},{"ruleId":"202","severity":1,"message":"224","line":38,"column":25,"nodeType":"204","messageId":"205","endLine":38,"endColumn":30},{"ruleId":"234","severity":1,"message":"235","line":44,"column":9,"nodeType":"208","endLine":44,"endColumn":12},{"ruleId":"202","severity":1,"message":"236","line":1,"column":28,"nodeType":"204","messageId":"205","endLine":1,"endColumn":36},{"ruleId":"202","severity":1,"message":"237","line":1,"column":38,"nodeType":"204","messageId":"205","endLine":1,"endColumn":44},{"ruleId":"202","severity":1,"message":"238","line":5,"column":10,"nodeType":"204","messageId":"205","endLine":5,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":34,"column":3,"nodeType":"241","messageId":"242","endLine":34,"endColumn":19},{"ruleId":"202","severity":1,"message":"243","line":5,"column":3,"nodeType":"204","messageId":"205","endLine":5,"endColumn":18},{"ruleId":"202","severity":1,"message":"244","line":13,"column":3,"nodeType":"204","messageId":"205","endLine":13,"endColumn":8},{"ruleId":"202","severity":1,"message":"245","line":14,"column":3,"nodeType":"204","messageId":"205","endLine":14,"endColumn":10},{"ruleId":"202","severity":1,"message":"246","line":16,"column":3,"nodeType":"204","messageId":"205","endLine":16,"endColumn":8},{"ruleId":"202","severity":1,"message":"247","line":33,"column":7,"nodeType":"204","messageId":"205","endLine":33,"endColumn":21},{"ruleId":"202","severity":1,"message":"236","line":1,"column":28,"nodeType":"204","messageId":"205","endLine":1,"endColumn":36},{"ruleId":"202","severity":1,"message":"237","line":1,"column":38,"nodeType":"204","messageId":"205","endLine":1,"endColumn":44},{"ruleId":"202","severity":1,"message":"238","line":5,"column":10,"nodeType":"204","messageId":"205","endLine":5,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":35,"column":3,"nodeType":"241","messageId":"242","endLine":35,"endColumn":19},{"ruleId":"202","severity":1,"message":"236","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":25},{"ruleId":"202","severity":1,"message":"248","line":3,"column":13,"nodeType":"204","messageId":"205","endLine":3,"endColumn":21},{"ruleId":"202","severity":1,"message":"249","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":14},{"ruleId":"202","severity":1,"message":"250","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":14},{"ruleId":"202","severity":1,"message":"251","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":15},{"ruleId":"202","severity":1,"message":"252","line":8,"column":10,"nodeType":"204","messageId":"205","endLine":8,"endColumn":18},{"ruleId":"202","severity":1,"message":"253","line":11,"column":31,"nodeType":"204","messageId":"205","endLine":11,"endColumn":33},{"ruleId":"202","severity":1,"message":"254","line":17,"column":7,"nodeType":"204","messageId":"205","endLine":17,"endColumn":20},{"ruleId":"202","severity":1,"message":"255","line":19,"column":12,"nodeType":"204","messageId":"205","endLine":19,"endColumn":24},{"ruleId":"206","severity":1,"message":"207","line":48,"column":28,"nodeType":"208","endLine":48,"endColumn":72},{"ruleId":"202","severity":1,"message":"236","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":25},{"ruleId":"202","severity":1,"message":"248","line":3,"column":13,"nodeType":"204","messageId":"205","endLine":3,"endColumn":21},{"ruleId":"202","severity":1,"message":"249","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":14},{"ruleId":"202","severity":1,"message":"250","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":14},{"ruleId":"202","severity":1,"message":"212","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":18},{"ruleId":"202","severity":1,"message":"256","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":18},{"ruleId":"202","severity":1,"message":"257","line":9,"column":8,"nodeType":"204","messageId":"205","endLine":9,"endColumn":18},{"ruleId":"202","severity":1,"message":"251","line":11,"column":8,"nodeType":"204","messageId":"205","endLine":11,"endColumn":15},{"ruleId":"202","severity":1,"message":"252","line":12,"column":10,"nodeType":"204","messageId":"205","endLine":12,"endColumn":18},{"ruleId":"202","severity":1,"message":"253","line":15,"column":31,"nodeType":"204","messageId":"205","endLine":15,"endColumn":33},{"ruleId":"202","severity":1,"message":"258","line":17,"column":9,"nodeType":"204","messageId":"205","endLine":17,"endColumn":15},{"ruleId":"202","severity":1,"message":"254","line":21,"column":7,"nodeType":"204","messageId":"205","endLine":21,"endColumn":20},{"ruleId":"202","severity":1,"message":"255","line":23,"column":12,"nodeType":"204","messageId":"205","endLine":23,"endColumn":24},{"ruleId":"202","severity":1,"message":"259","line":35,"column":12,"nodeType":"204","messageId":"205","endLine":35,"endColumn":21},{"ruleId":"202","severity":1,"message":"260","line":40,"column":12,"nodeType":"204","messageId":"205","endLine":40,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":75,"column":32,"nodeType":"208","endLine":75,"endColumn":76},{"ruleId":"202","severity":1,"message":"224","line":11,"column":25,"nodeType":"204","messageId":"205","endLine":11,"endColumn":30},{"ruleId":"217","severity":1,"message":"261","line":29,"column":6,"nodeType":"219","endLine":29,"endColumn":21,"suggestions":"262"},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Card' is defined but never used.","'Grid' is defined but never used.","'TableContainer' is defined but never used.","'IconButton' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateTable'. Either include it or remove the dependency array.","ArrayExpression",["263"],["264"],["265"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.",["266"],"'Component' is defined but never used.","'setName' is assigned a value but never used.","'setYear' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["267"],["268"],["269"],["270"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'useRef' is defined but never used.","'search' is defined but never used.","getter-return","Expected getter 'renderMovies' to always return a value.","FunctionExpression","expectedAlways","'signInWithPopup' is defined but never used.","'query' is defined but never used.","'getDocs' is defined but never used.","'where' is defined but never used.","'googleProvider' is assigned a value but never used.","'ReactDOM' is defined but never used.","'Search' is defined but never used.","'Movies' is defined but never used.","'classes' is defined but never used.","'truncStr' is defined but never used.","'id' is assigned a value but never used.","'selectedTitle' is assigned a value but never used.","'triggerInput' is defined but never used.","'DeleteIcon' is defined but never used.","'deleteicon' is defined but never used.","'poster' is assigned a value but never used.","'deleteRow' is defined but never used.","'insRow' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchUserName' and 'navigate'. Either include them or remove the dependency array.",["271"],{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"272","fix":"276"},{"desc":"274","fix":"277"},{"desc":"278","fix":"279"},{"desc":"278","fix":"280"},{"desc":"272","fix":"281"},{"desc":"278","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [generateTable, rows]",{"range":"285","text":"286"},"Update the dependencies array to be: [params.id, navigate, generateTable]",{"range":"287","text":"288"},{"range":"289","text":"286"},{"range":"290","text":"288"},"Update the dependencies array to be: [user, loading, navigate]",{"range":"291","text":"292"},{"range":"293","text":"292"},{"range":"294","text":"286"},{"range":"295","text":"292"},"Update the dependencies array to be: [user, loading, navigate, fetchUserName]",{"range":"296","text":"297"},[4647,4653],"[generateTable, rows]",[5720,5741],"[params.id, navigate, generateTable]",[2414,2420],[4014,4035],[579,594],"[user, loading, navigate]",[707,722],[4628,4634],[508,523],[904,919],"[user, loading, navigate, fetchUserName]"]