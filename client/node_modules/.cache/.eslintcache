[{"/Users/annajiang/Desktop/fuck/client/src/index.js":"1","/Users/annajiang/Desktop/fuck/client/src/App.js":"2","/Users/annajiang/Desktop/fuck/client/src/components/lists.js":"3","/Users/annajiang/Desktop/fuck/client/src/components/review.js":"4","/Users/annajiang/Desktop/fuck/client/src/components/edit.js":"5","/Users/annajiang/Desktop/fuck/client/src/components/navbar.js":"6","/Users/annajiang/Desktop/fuck/client/src/components/diary.js":"7","/Users/annajiang/Desktop/fuck/client/src/components/create.js":"8","/Users/annajiang/Desktop/fuck/client/src/components/logout.js":"9","/Users/annajiang/Desktop/fuck/client/src/components/editList.js":"10","/Users/annajiang/Desktop/fuck/client/src/components/search/search.js":"11","/Users/annajiang/Desktop/fuck/client/src/components/createList.js":"12","/Users/annajiang/Desktop/fuck/client/src/components/login.js":"13","/Users/annajiang/Desktop/fuck/client/src/components/viewList.js":"14","/Users/annajiang/Desktop/fuck/client/src/components/discover.js":"15","/Users/annajiang/Desktop/fuck/client/src/components/info.js":"16","/Users/annajiang/Desktop/fuck/client/src/components/firebase.js":"17","/Users/annajiang/Desktop/fuck/client/src/components/searchList/search.js":"18","/Users/annajiang/Desktop/fuck/client/src/components/searchList/movies.js":"19","/Users/annajiang/Desktop/fuck/client/src/components/search/movies.js":"20","/Users/annajiang/Desktop/fuck/client/src/components/searchList/movie.js":"21","/Users/annajiang/Desktop/fuck/client/src/components/search/movie.js":"22"},{"size":290,"mtime":1680455123111,"results":"23","hashOfConfig":"24"},{"size":1851,"mtime":1680993776912,"results":"25","hashOfConfig":"24"},{"size":2998,"mtime":1680994111323,"results":"26","hashOfConfig":"24"},{"size":5671,"mtime":1681097894141,"results":"27","hashOfConfig":"24"},{"size":7989,"mtime":1681098107566,"results":"28","hashOfConfig":"24"},{"size":7209,"mtime":1681095704169,"results":"29","hashOfConfig":"24"},{"size":2294,"mtime":1681098236750,"results":"30","hashOfConfig":"24"},{"size":6675,"mtime":1681098270108,"results":"31","hashOfConfig":"24"},{"size":2642,"mtime":1680994181980,"results":"32","hashOfConfig":"24"},{"size":9530,"mtime":1681098773400,"results":"33","hashOfConfig":"24"},{"size":1881,"mtime":1680994362124,"results":"34","hashOfConfig":"24"},{"size":9088,"mtime":1681098724737,"results":"35","hashOfConfig":"24"},{"size":2311,"mtime":1680994147913,"results":"36","hashOfConfig":"24"},{"size":7033,"mtime":1680994633338,"results":"37","hashOfConfig":"24"},{"size":2223,"mtime":1681176726663,"results":"38","hashOfConfig":"24"},{"size":12502,"mtime":1681094977762,"results":"39","hashOfConfig":"24"},{"size":967,"mtime":1680573270086,"results":"40","hashOfConfig":"24"},{"size":1806,"mtime":1680992149453,"results":"41","hashOfConfig":"24"},{"size":465,"mtime":1680455123110,"results":"42","hashOfConfig":"24"},{"size":461,"mtime":1680455123108,"results":"43","hashOfConfig":"24"},{"size":1455,"mtime":1680994515637,"results":"44","hashOfConfig":"24"},{"size":1384,"mtime":1680994439900,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"8ixhfj",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/annajiang/Desktop/fuck/client/src/index.js",[],["100","101"],"/Users/annajiang/Desktop/fuck/client/src/App.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/lists.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/review.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/edit.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/navbar.js",["102","103"],"import React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './navbar.css';\n\nimport logo from \"./logo.png\";\nimport Button from '@mui/material/Button';\nimport {IconButton} from \"@mui/material\";\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\n// Here, we display our Navbar\nexport default function Navbar() {\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  const [anchorElAcc, setAnchorElAcc] = React.useState(null);\n  const openAcc = Boolean(anchorElAcc);\n  const handleClickAcc = (event) => {\n      setAnchorElAcc(event.currentTarget);\n  };\n  const handleCloseAcc = () => {\n      setAnchorElAcc(null);\n  };\n\n  const [user] = useAuthState(auth);\n\n  return (\n    user ? (\n    // logged in user\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top nav-fill\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n        <a><img src={logo} width=\"25\" height=\"25\" alt=\"Film Diary\"/></a> FILM DIARY\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse centerLinksPls\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/diary\">diary</a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/lists\">lists</a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/discover\">discover</a>\n          </li>\n        </ul>\n        </div>\n\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n            <Stack direction=\"row\" alignItems=\"center\" gap={0}>\n              <ThemeProvider theme={theme}>\n                {/* edit/delete button */}\n                <Button color=\"success\"\n                  id=\"basic-button\"\n                  aria-controls={open ? 'basic-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={open ? 'true' : undefined}\n                  onClick={handleClick}\n                  // small\n                >+ NEW</Button>\n              </ThemeProvider>\n              <Menu\n                id=\"basic-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{\n                  'aria-labelledby': 'basic-button',\n                }}>\n                <Link to={`/create`} style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleClose}>Review</MenuItem></Link>\n                <Link to={`/createlist`} style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleClose}>Film List</MenuItem></Link>\n              </Menu>\n              <ThemeProvider theme={theme}>\n                <IconButton \n                  color=\"primary\"\n                  id=\"acc-button\"\n                  aria-controls={openAcc ? 'acc-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={openAcc ? 'true' : undefined}\n                  onClick={handleClickAcc}\n                ><AccountCircleIcon \n                sx={{ fontSize: 30 }}\n                /></IconButton>\n              </ThemeProvider>\n              <Menu\n                id=\"acc-menu\"\n                anchorEl={anchorElAcc}\n                open={openAcc}\n                onClose={handleCloseAcc}\n                MenuListProps={{\n                  'aria-labelledby': 'acc-button',\n                }}>\n                <Link to=\"/logout\" style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleCloseAcc}>Log Out</MenuItem></Link>\n              </Menu>\n              </Stack>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n    ) : (\n      <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top nav-fill\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n        <a><img src={logo} width=\"25\" height=\"25\" alt=\"Film Diary\"/></a> FILM DIARY\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse centerLinksPls\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/diary\">diary</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/lists\">lists</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/discover\">discover</a>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarSupportedContent\" >\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <ThemeProvider theme={theme}>\n                <IconButton \n                  color=\"neutral\"\n                  id=\"acc-button\"\n                  aria-controls={openAcc ? 'acc-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={openAcc ? 'true' : undefined}\n                  onClick={handleClickAcc}\n                ><AccountCircleIcon \n                  sx={{ fontSize: 30 }}\n                /></IconButton>\n              </ThemeProvider>\n              <Menu\n                id=\"acc-menu\"\n                anchorEl={anchorElAcc}\n                open={openAcc}\n                onClose={handleCloseAcc}\n                MenuListProps={{\n                  'aria-labelledby': 'acc-button',\n                }}>\n                <Link to=\"/login\" style={{ textDecoration: 'none', color: 'black'}}>\n                <MenuItem onClick={handleCloseAcc}>Log In</MenuItem></Link>\n              </Menu>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n    )\n  );\n}\n","/Users/annajiang/Desktop/fuck/client/src/components/diary.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/create.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/logout.js",["104"],"import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { auth, db, logout } from \"./firebase\";\nimport { query, collection, getDocs, where } from \"firebase/firestore\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nfunction Dashboard() {\n  const [user, loading] = useAuthState(auth);\n  const [name, setName] = useState(\"\");\n  const navigate = useNavigate();\n  const fetchUserName = async () => {\n    try {\n      const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user?.uid));\n      const doc = await getDocs(q);\n      const data = doc.docs[0].data();\n      setName(data.name);\n    } catch (err) {\n      console.error(err);\n      alert(\"An error occured while fetching user data\");\n    }\n  };\n  useEffect(() => {\n    if (loading) return;\n    if (!user) return navigate(\"/\");\n    fetchUserName();\n  }, [user, loading]);\n\n  const themeColor = createTheme({\n    palette: {\n      neutral: {\n        main: '#64748B',\n        contrastText: '#fff',\n      },\n    },\n  });\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n    <CssBaseline />\n    <Box\n      sx={{\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Avatar sx={{ m: 2, mt: 10 }}>\n        <LogoutIcon />\n      </Avatar>\n      <Typography> Are you sure you want to log out, </Typography>\n      <Typography component=\"h1\"> {name}? </Typography>\n      <Box \n        fullWidth\n        component=\"form\"\n        spacing={2}\n        justify='space-between'\n        noValidate \n        sx={{ mt: 1 }}\n        >\n          <ThemeProvider theme={themeColor}>\n          <Link to=\"/\" style={{ textDecoration: 'none', color: 'white'}}>\n          <Button\n            // fullWidth\n            sx={{ mt: 3 }}\n            variant=\"outlined\"\n            color=\"neutral\"\n            >\n            CANCEL\n          </Button></Link>\n          </ThemeProvider>\n          <Button\n            // fullWidth\n            sx={{ mt: 3, marginLeft: 2 }}\n            variant=\"contained\"\n            color=\"error\"\n            onClick={logout}>\n            LOG OUT\n          </Button>\n      </Box>\n    </Box>\n  </Container>\n  );\n}\nexport default Dashboard;","/Users/annajiang/Desktop/fuck/client/src/components/editList.js",["105","106"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport TextField from '@mui/material/TextField';\nimport Search from \"./searchList/search\";\nimport { Card, Grid, Table, TableBody, TableCell, TableContainer, TableRow, IconButton,} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport dayjs from 'dayjs';\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nexport default function EditList() {\n  const [user] = useAuthState(auth);\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year: \"\", poster: \"\", filmid: \"\"}\n    }\n  ]);\n\n  const generateRow = () => {\n    return {\n      id: 1,\n      item: {title: \"\", year: \"\", poster: \"\", filmid: \"\"}\n    }\n  }\n\n  const handleDeleteRow = (event, id) => {\n    setRows(rows => {\n      rows[id - 1].item[\"title\"] = \"\";\n      for (let i = id - 1; i < rows.length; i++) {\n        rows[i].id--;\n      }\n    });\n\n    setRows((prevRows) => {\n      return [\n        ...rows.slice(0, id - 1),\n        ...rows.slice(id),\n      ];\n    });\n  }\n\n  const handleChange = (e, id) => {\n    let value = e.target.value;\n    if (id === 1) {\n      if (value !== \"\") {\n        for (let i = 0; i < rows.length; i++) {\n            console.log(rows[i].id);\n            rows[i].id=i+2;\n        }\n       setRows((prevRows) => [generateRow(), ...prevRows]);\n       rows[0].item[\"title\"]=value;\n       rows[0].item[\"year\"]=document.getElementById(\"addYearToList\").value;\n       rows[0].item[\"poster\"]=document.getElementById(\"addPosterToList\").src;\n       rows[0].item[\"filmid\"]=document.getElementById(\"addFilmIdToList\").value;\n      }\n    } else if (id + 1 === rows.length) {\n      if (value === \"\") {\n        handleDeleteRow(e, id + 1);\n      }\n    }\n  }\n\n  const generateTable = () => {\n    return (\n      <Table>\n        <TableBody>\n          {rows.map((row) => \n          \n          row.id === 1 ? (\n            <TableRow\n            key={row.id}\n            sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            hidden\n            > \n            <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n              <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}} alt=\"poster\"></img>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n              <TextField \n                id='addFilmToList'\n                placeholder={\"Add Item\"} \n                onClick={(e) => handleChange(e, row.id)} \n                value={row.item[\"title\"]}\n                fullWidth\n                autoComplete=\"off\"\n                variant=\"standard\"\n                InputProps={{ disableUnderline: true, readOnly: true,  }}\n              /><p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              <p id=\"addFilmIdToList\" hidden>({row.item[\"filmid\"]})</p>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n              {\n                row.id === 1 ? (<></>) : (     //changed here\n                  <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                    <DeleteIcon />\n                  </IconButton>\n                )\n              }\n            </TableCell>\n          </TableRow>\n          ) : \n          ( \n            <TableRow\n              key={row.id}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            > \n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}} alt=\"poster\"></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n                <TextField \n                  id='addFilmToList'\n                  placeholder={\"Add Item\"} \n                  onClick={(e) => handleChange(e, row.id)} \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  autoComplete=\"off\"\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500} }}\n                /><p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n                <p id=\"addFilmIdToList\" hidden>({row.item[\"filmid\"]})</p>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n                {\n                  row.id === 1 ? (<></>) : (     //changed here\n                    <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                      <DeleteIcon />\n                    </IconButton>\n                  )\n                }\n              </TableCell>\n            </TableRow>       \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n// get list data from form\nconst [form, setForm] = useState({\n  name: \"\",\n  description: \"\",\n  lists: [],\n});\nconst params = useParams();\nconst navigate = useNavigate();\n\nuseEffect(() => {\n  async function fetchData() {\n    const id = params.id.toString();\n    const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const list = await response.json();\n    if (!list) {\n      window.alert(`List with id ${id} not found`);\n      navigate(\"/\");\n      return;\n    }\n\n    setForm(list);\n\n    let sizes_arr = JSON.parse(list.list); \n   \n    let rows_arr = [];\n    rows_arr.push({\n      id: 1,\n      item: {title: \"\", poster: \"\"}\n    })\n    for (let i = 0; i < sizes_arr.length; i++) {\n      rows_arr.push({\n        id: i+2,\n        item: sizes_arr[i]\n      })\n    }\n    console.log(rows_arr);\n      \n    setRows(rows_arr);\n    setTableData(generateTable());\n  }\n\n  fetchData();\n\n  return;\n}, [params.id, navigate]);\n\n// These methods will update the state properties.\nfunction updateForm(value) {\n  return setForm((prev) => {\n    return { ...prev, ...value };\n  });\n}\n\nasync function onSubmit(e) {\n  e.preventDefault();\n\n  let arr = [];\n    if (rows[0].item[\"title\"] === \"\") {\n      arr = rows.slice(1, rows.length);\n    } else {\n      arr = rows;\n    }\n\n    let items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(arr[i].item);\n    }\n\n  const editedList = {\n    name: form.name,\n    description: form.description,\n    list: [],\n    updated: dayjs(new Date()),\n    thumbnail1: \"\",\n    thumbnail2: \"\",\n    thumbnail3: \"\",\n  };\n  editedList.list = JSON.stringify(items);\n  if (arr.length > 0) {\n    editedList.thumbnail1 = arr[0].item.poster;\n  }\n  if (arr.length > 1) {\n    editedList.thumbnail2 = arr[1].item.poster;\n  }\n  if (arr.length > 2) {\n    editedList.thumbnail3 = arr[2].item.poster;\n  }\n\n  // This will send a post request to update the data in the database.\n  await fetch(`http://localhost:4000/updatelist/${params.id}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedList),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  });\n\n  navigate(`/list/${params.id.toString()}`);\n}\n\n// This following section will display the form that takes input from the user to update the data.\nreturn (\n  user ? (\n  <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <form onSubmit={onSubmit}>\n    <div class=\"container\">\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.name}\n        multiline\n        // rows={1}\n        maxRows={10}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        inputProps={{style: {fontSize: 28, lineHeight: 1.2, fontWeight: 500}}} // font size of input text\n        InputLabelProps={{style: {fontSize: 28, lineHeight: 1.2, fontWeight: 500}}} // font size of input label\n        onChange={e => updateForm({ name: e.target.value })}\n        type=\"text\"\n      />\n      <br></br><br></br>\n      <TextField\n        fullWidth\n        id=\"outlined-multiline-flexible\"\n        defaultValue={form.description}\n        placeholder=\"ADD DESCRIPTION...\"\n        multiline\n        rows={3}\n        maxRows={3}\n        variant=\"standard\"\n        InputProps={{ disableUnderline: true }}\n        onChange={e => updateForm({ description: e.target.value })}\n        type=\"text\"\n      />    \n    </div> <br></br>\n    <div class=\"container\"><Search/></div> <br></br>\n    <div class=\"container\">\n      <Grid container>\n\n        <Grid item lg={12} justifyContent=\"center\" display=\"flex\">\n          <Card>\n            <TableContainer>\n              {tableData} {/* this variable will change to contain all data */}\n            </TableContainer>\n          </Card>\n        </Grid>\n        </Grid>\n      </div>\n    <br></br>\n\n    {/* cancel/submit button */}\n    <div className=\"form-group text-right container\">\n      <a href={`/list/${params.id}`} class=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>                 \n      <input\n        type=\"submit\"\n        value=\"SAVE\"\n        className=\"btn btn-success\"\n      />\n    </div>\n    </form>\n  </div>  \n  ) : (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300,}}>\n      <h2 class=\"text-center\">You need to be logged in to edit lists!</h2>\n    </div>\n  )\n);\n}\n","/Users/annajiang/Desktop/fuck/client/src/components/search/search.js",["107"],"import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Movies from './movies';\nimport TextField from '@mui/material/TextField';\n\nclass Search extends Component {\n  state = {\n    movies: null,\n    loading: false,\n    value: ''\n  };\n\n  search = async val => {\n    this.setState({ loading: true });\n    const res = await axios(\n      `https://api.themoviedb.org/3/search/movie?query=${val}&api_key=dbc0a6d62448554c27b6167ef7dabb1b`\n    );\n    const movies = await res.data.results;\n\n    this.setState({ movies, loading: false });\n  };\n\n  onChangeHandler = async e => {\n    this.search(e.target.value);\n    this.setState({ value: e.target.value });\n  };\n\n  onClickHandler = async e => {\n    this.setState({ value: document.getElementById('name-hidden').value });\n  };\n\n  get renderMovies() {\n    if (this.state.movies) {\n      return <Movies list={this.state.movies} />;\n    }\n  }\n\n  render() {\n    return (\n      <div style={{margin: 0}}>\n      \t{/* <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}> */}\n        {/* <input\n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          placeholder=\"Search Here\"\n        /> */}\n        <TextField\n          fullWidth\n          id=\"searchbar\"\n          variant=\"outlined\" \n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          onClick={(e) => {\n            this.onClickHandler(e);\n            // allow search again\n            if (document.getElementById('searchresults')) {\n              document.getElementById('searchresults').style.visibility = \"visible\";\n            }           \n          }}\n          placeholder=\"Search for Films...\"\n          required\n          size=\"small\"\n          autoComplete='off'\n        />\n        <div>{this.renderMovies}</div>\n      </div>\n\t  // </div>\n    );\n  }\n}\n\nexport default Search;","/Users/annajiang/Desktop/fuck/client/src/components/createList.js",["108"],"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Search from \"./searchList/search\";\nimport { Card, Grid, Table, TableBody, TableCell, TableContainer, TableRow, IconButton,} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\nimport dayjs from 'dayjs';\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nexport default function CreateList() {\n  const [user] = useAuthState(auth);\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\", filmid: \"\"}\n    }\n  ]);\n\n  const generateRow = () => {\n    return {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\", filmid: \"\"}\n    }\n  }\n\n  const handleDeleteRow = (event, id) => {\n    setRows(rows => {\n      rows[id - 1].item[\"title\"] = \"\";\n      for (let i = id - 1; i < rows.length; i++) {\n        rows[i].id--;\n      }\n    });\n\n    setRows((prevRows) => {\n      return [\n        ...rows.slice(0, id - 1),\n        ...rows.slice(id),\n      ];\n    });\n  }\n\n  const handleChange = (e, id) => {\n    let value = e.target.value;\n    if (id === 1) {\n      if (value !== \"\") {\n        for (let i = 0; i < rows.length; i++) {\n            rows[i].id=i+2;\n        }\n       setRows((prevRows) => [generateRow(), ...prevRows]);\n       rows[0].item[\"title\"]=value;\n       rows[0].item[\"year\"]=document.getElementById(\"addYearToList\").value;\n       rows[0].item[\"poster\"]=document.getElementById(\"addPosterToList\").src;\n       rows[0].item[\"filmid\"]=document.getElementById(\"addFilmIdToList\").value;\n      }\n    } else if (id + 1 === rows.length) {\n      if (value === \"\") {\n        handleDeleteRow(e, id + 1);\n      }\n    }\n  }\n\n  const generateTable = () => {\n    return (\n      <Table>\n        <TableBody>\n          {rows.map((row) => \n          \n          row.id === 1 ? (\n            <TableRow\n            key={row.id}\n            sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            hidden\n            > \n            <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n              <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}} alt=\"poster\"></img>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n              <TextField \n                id='addFilmToList'\n                placeholder={\"Add Item\"} \n                onClick={(e) => handleChange(e, row.id)} \n                value={row.item[\"title\"]}\n                fullWidth\n                autoComplete=\"off\"\n                variant=\"standard\"\n                InputProps={{ disableUnderline: true, readOnly: true }}\n              />\n              <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              <p id=\"addFilmIdToList\" hidden>({row.item[\"filmid\"]})</p>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n              {\n                row.id === 1 ? (<></>) : (     //changed here\n                  <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                    <DeleteIcon />\n                  </IconButton>\n                )\n              }\n            </TableCell>\n          </TableRow>\n          ) : \n          ( \n            <TableRow\n              key={row.id}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 }}}\n            > \n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}} alt=\"poster\"></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-7\">\n                <TextField \n                  id='addFilmToList'\n                  placeholder={\"Add Item\"} \n                  onClick={(e) => handleChange(e, row.id)} \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  autoComplete=\"off\"\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500}}}\n                />\n                <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n                <p id=\"addFilmIdToList\" hidden>({row.item[\"filmid\"]})</p>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" className=\"col-sm-1\">\n                {\n                  row.id === 1 ? (<></>) : (     //changed here\n                    <IconButton onClick={(e) => handleDeleteRow(e, row.id)} style={{float:\"right\"}}>\n                      <DeleteIcon />\n                    </IconButton>\n                  )\n                }\n              </TableCell>\n            </TableRow>       \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n  // form\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    list: [],\n    updated: \"\",\n    thumbnail1: \"\",\n    thumbnail2: \"\",\n    thumbnail3: \"\",\n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    let arr = [];\n    // if (rows[rows.length - 1].item === \"\") {\n    if (rows[0].item[\"title\"] === \"\") {\n      arr = rows.slice(1, rows.length);\n    } else {\n      arr = rows;\n    }\n\n    let items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(arr[i].item);\n    }\n\n    // set default list name\n    const n = isNaN(form.name) ? form.name : \"Untitled List\";\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newList = { ...form };\n    newList.name = n;\n    newList.list = JSON.stringify(items);\n    newList.updated = dayjs(new Date());\n    if (arr.length > 0) {\n      newList.thumbnail1 = arr[0].item.poster;\n    }\n    if (arr.length > 1) {\n      newList.thumbnail2 = arr[1].item.poster;\n    }\n    if (arr.length > 2) {\n      newList.thumbnail3 = arr[2].item.poster;\n    }\n    \n    await fetch(\"http://localhost:4000/list/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newList),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", description: \"\", list: \"\", updated: \"\", thumbnail1: \"\", thumbnail2: \"\", thumbnail3: \"\" });\n    navigate(\"/lists\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    user ? (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n      <form onSubmit={onSubmit}>\n      <div className=\"container\">\n        <TextField\n          fullWidth\n          id=\"outlined-multiline-flexible\"\n          placeholder=\"New List\"\n          multiline\n          // rows={1}\n          maxRows={10}\n          variant=\"standard\"\n          InputProps={{ disableUnderline: true }}\n          inputProps={{style: {fontSize: 28, lineHeight: 1.2, fontWeight: 500}}} // font size of input text\n          InputLabelProps={{style: {fontSize: 28, lineHeight: 1.2, fontWeight: 500}}} // font size of input label\n          onChange={e => updateForm({ name: e.target.value })}\n          type=\"text\"\n        /> \n        <br></br><br></br>\n        <TextField\n          fullWidth\n          id=\"outlined-multiline-flexible\"\n          placeholder=\"ADD DESCRIPTION...\"\n          multiline\n          rows={3}\n          maxRows={3}\n          variant=\"standard\"\n          InputProps={{ disableUnderline: true }}\n          onChange={e => updateForm({ description: e.target.value })}\n          type=\"text\"\n        />    \n      </div> <br></br>\n      <div className=\"container\"><TextField fullWidth id=\"outlined-basic\" label=\"ADD FILMS...\" variant=\"outlined\" hidden/></div> \n      <div className=\"container\"><Search/></div> <br></br>\n      <div className=\"container\">\n      <Grid container>\n        <Grid item lg={12} justifyContent=\"center\" display=\"flex\">\n          <Card>\n            <TableContainer>\n              {tableData} {/* this variable will change to contain all data */}\n            </TableContainer>\n          </Card>\n        </Grid>\n        </Grid>\n      </div>\n      <br></br>\n      \n      <div className=\"form-group text-right container\">\n        <a href=\"/lists\" className=\"btn btn-light mr-3\" role=\"button\">CANCEL</a>\n        <input\n          type=\"submit\"\n          value=\"SAVE\"\n          className=\"btn btn-success\"\n        />\n      </div>   \n      </form>  \n    </div>\n    ) : (\n      <div style={{marginTop: 100, marginLeft: 300, marginRight: 300,}}>\n        <h2 class=\"text-center\">You need to be logged in to create lists!</h2>\n      </div>\n    )\n  );\n}\n","/Users/annajiang/Desktop/fuck/client/src/components/login.js",["109"],"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { auth, logInWithEmailAndPassword } from \"./firebase\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport LockPersonIcon from '@mui/icons-material/LockPerson';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\n\nfunction Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, loading] = useAuthState(auth);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (loading) {\n      // maybe trigger a loading screen\n      return;\n    }\n    if (user) navigate(\"/\");\n  }, [user, loading]);\n\n  return (\n\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 2, mt: 10 }}>\n          <LockPersonIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Admin Log In\n        </Typography>\n        <Box component=\"form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            required\n            fullWidth\n            margin=\"normal\"\n            id=\"outlined-required\"\n            label=\"E-mail Address\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            autoFocus\n          />\n          <TextField\n            required\n            fullWidth\n            margin=\"normal\"\n            type=\"password\"\n            id=\"outlined-required\"\n            label=\"Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button\n            fullWidth\n            sx={{ mt: 3, mb: 2 }}\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => logInWithEmailAndPassword(email, password)}>\n            LOG IN\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Login;","/Users/annajiang/Desktop/fuck/client/src/components/viewList.js",["110","111"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./firebase\";\n\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#64748B',\n      contrastText: '#fff',\n    },\n  },\n});\n\nexport default function ViewList() {\n  // table stuff\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      item: {title: \"\", year:\"\", poster: \"\", filmid: \"\"}\n    }\n  ]);\n\n  const generateTable = () => {\n    return (\n      <Table className=\"table-hover\">\n        <TableBody>\n          {rows.map((row) => (\n            <a href={`/info/${row.item[\"filmid\"]}`} style={{ textDecoration: 'none', color: 'black'}}>\n            <TableRow\n              key={row.id}\n              sx={{ \n                '&:last-child td, &:last-child th': { border: 0 } ,\n                '&:first-child td, &:first-child th': { borderTop: 1, color: \"#dee2e6\" }\n              }}\n            >\n              <TableCell component=\"th\" scope=\"row\" id=\"poster\" className=\"col-sm-1\">\n                <img id='addPosterToList' src={row.item[\"poster\"]} style={{height :100}} alt=\"poster\"></img>\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" id=\"name\" className=\"col-sm-10\">\n                <TextField \n                  id='addFilmToList' \n                  value={row.item[\"title\"]}\n                  fullWidth\n                  variant=\"standard\"\n                  InputProps={{ disableUnderline: true, readOnly: true, style: {fontWeight: 500}}}\n                />\n                <p id=\"addYearToList\" className=\"text-muted\">({row.item[\"year\"]})</p>\n              </TableCell>\n            </TableRow> \n            </a>    \n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n  const [tableData, setTableData] = useState(generateTable());\n\n  useEffect(() => {\n    setTableData(generateTable());\n  }, [rows])\n\n  // dropdown menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n      setAnchorEl(null);\n  };\n\n  // confirm delete alert\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  const handleClickOpenAlert = () => {\n    setAnchorEl(null);\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  // list info\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    list: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  const [user] = useAuthState(auth);\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:4000/list/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const list = await response.json();\n      if (!list) {\n        window.alert(`List with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(list);\n      console.log(list.list);\n\n      let sizes_arr = JSON.parse(list.list);\n      let rows_arr = [];\n      for (let i = 0; i < sizes_arr.length; i++) {\n        rows_arr.push({\n          id: i+1,\n          item: sizes_arr[i]\n        })\n      }\n        \n      setRows(rows_arr);\n      setTableData(generateTable());\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // This method will delete a record\n  async function deleteList(deleteId) {\n      await fetch(`http://localhost:4000/delete/${deleteId}`, {\n          method: \"DELETE\"\n      });\n      navigate(\"/lists\")\n  }\n\n  return (\n    <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n    <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col nopadding\">\n        <h3>{form.name}</h3>\n      </div>\n      <div className=\"col col-1\">\n        <div className\n        =\"float-right\">\n          <ThemeProvider theme={theme}>\n            {/* edit/delete button */}\n            {user && <Button color=\"neutral\"\n              id=\"basic-button\"\n              aria-controls={open ? 'basic-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >•••</Button>}\n          </ThemeProvider>\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}>\n            <Link to={`/editlist/${params.id}`} style={{ textDecoration: 'none', color: 'black'}}>\n            <MenuItem>Edit</MenuItem></Link>\n            <MenuItem onClick={handleClickOpenAlert}>Delete</MenuItem>\n          </Menu> \n        </div>\n      </div>\n    </div>    \n    </div>\n    <br></br>\n    {\n      form.description === \"\" ? (<></>) : ( \n        <div className=\"container\">\n          <p>{form.description}</p> <br></br>\n        </div>\n      )\n    }\n    <div>\n    <div className=\"container\">\n    {/* <Grid container> */}\n    {/* <Grid item lg={12} justifyContent=\"center\" display=\"flex\"> */}\n      {/* <Card> */}\n        {/* <TableContainer> */}\n          {tableData} {/* this variable will change to contain all data */}\n        {/* </TableContainer> */}\n      {/* </Card> */}\n    {/* </Grid> */}\n    {/* </Grid> */}\n    </div>\n    </div>\n\n    {/* delete confirmation alert */}\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Delete Confirmation\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete your list?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n      <ThemeProvider theme={theme}>\n        <Button color=\"neutral\" onClick={handleCloseAlert}>Cancel</Button>\n        <Button color=\"error\" onClick={() => {\n              deleteList(params.id);\n          }} autoFocus>\n          Delete\n        </Button>\n      </ThemeProvider>\n      </DialogActions>\n    </Dialog>    \n    </div>\n  );\n}\n","/Users/annajiang/Desktop/fuck/client/src/components/discover.js",["112"],"/Users/annajiang/Desktop/fuck/client/src/components/info.js",["113"],"import React, {useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport defaultposter from './search/defaultposter.jpeg';\nimport './info.css';\n\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport { styled } from \"@mui/system\";\n\nimport Carousel from 'react-grid-carousel';\n\nconst themeCastButtons = createTheme({      \n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst StyledTabPanel = styled(\"div\")({\n    \"& .MuiBox-root\": {\n      paddingTop: 10,\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0\n    }\n  });\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n    <StyledTabPanel\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n    </StyledTabPanel>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  \nexport default function Info() {\n    // for tabs\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n\n    const params = useParams();\n\n    const [title, setTitle] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [tagline, setTagline] = useState(\"\");\n    const [overview, setOverview] = useState(\"\");\n    const [poster, setPoster] = useState(\"\");\n    const [runtime, setRuntime] = useState(\"\");\n    const [director, setDirector] = useState([]);\n    const [cast, setCast] = useState([{\n        cast_id: \"\",\n        actor: \"\",\n        character: \"\",\n    }]);\n    const [crew, setCrew] = useState([{\n        crew_id: \"\",\n        name: \"\",\n        job: \"\",\n    }]);\n    const [genres, setGenres] = useState([{\n        genre_id: \"\",\n        genre: \"\",\n    }]);\n    const [keywords, setKeywords] = useState([{\n        keyword_id: \"\",\n        keyword: \"\",\n    }]);\n    const [recs, setRecs] = useState([{\n        rec_id: \"\",\n        title: \"\",\n        poster: \"\",\n    }]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const filmid = params.id.toString();\n            const info = await axios(\n                `https://api.themoviedb.org/3/movie/${filmid}?api_key=dbc0a6d62448554c27b6167ef7dabb1b&language=en-US`\n            )\n\n            setTitle(info.data.title);\n            setYear(info.data.release_date.substring(0, 4));\n            setTagline(info.data.tagline.toUpperCase());\n            setOverview(info.data.overview);\n            const posterPath = info.data.poster_path != null ? `http://image.tmdb.org/t/p/original${info.data.poster_path}` : defaultposter\n            setPoster(posterPath);\n            setRuntime(info.data.runtime);\n\n            const genreArr = [];\n            for (let b = 0; b < info.data.genres.length; b++) {\n                genreArr.push({genre_id: info.data.genres[b].id, genre: info.data.genres[b].name})\n            }\n            setGenres(genreArr);\n\n            const credits = await axios(\n                `https://api.themoviedb.org/3/movie/${filmid}/credits?api_key=dbc0a6d62448554c27b6167ef7dabb1b&language=en-US`\n            );\n\n            const castArr = [];\n            for (let i = 0; i < credits.data.cast.length; i++) {\n                castArr.push({cast_id: credits.data.cast[i].cast_id, actor: credits.data.cast[i].name, character: credits.data.cast[i].character})\n            }\n            setCast(castArr);\n\n            const crewArr = [];\n            for (let a = 0; a < credits.data.crew.length; a++) {\n                crewArr.push({crew_id: credits.data.crew[a].id, name: credits.data.crew[a].name, job: credits.data.crew[a].job})\n            }\n            setCrew(crewArr);\n\n            const dirArrFilter = credits.data.crew.filter(person => person.job === \"Director\");\n            let dirString = \"\";\n            for (let j = 0; j < dirArrFilter.length; j++) {\n                if (j === 0) {\n                    dirString = dirArrFilter[j].original_name;\n                } else {\n                    dirString = dirString + \", \" + dirArrFilter[j].original_name;\n                }\n            }\n            setDirector(dirString);\n\n            const keywords = await axios(\n                `https://api.themoviedb.org/3/movie/${filmid}/keywords?api_key=dbc0a6d62448554c27b6167ef7dabb1b&language=en-US`\n            );\n            const keywordArr = [];\n            for (let k = 0; k < keywords.data.keywords.length; k++) {\n                keywordArr.push({keyword_id: keywords.data.keywords[k].id, keyword: keywords.data.keywords[k].name});\n            }\n            setKeywords(keywordArr);\n\n            const recFetch = await axios(\n                `https://api.themoviedb.org/3/movie/${filmid}/similar?api_key=dbc0a6d62448554c27b6167ef7dabb1b&language=en-US`\n            );\n            const recArr = [];\n            for (let i = 0; i < recFetch.data.results.length; i++) {\n              const posterPath = recFetch.data.results[i].poster_path != null ? `http://image.tmdb.org/t/p/w185${recFetch.data.results[i].poster_path}` : defaultposter\n              recArr.push({\n                rec_id: recFetch.data.results[i].id, \n                title: recFetch.data.results[i].title, \n                poster: posterPath\n              })\n            }\n            setRecs(recArr);\n        }\n        \n        \n        fetchData();\n        return;\n    }, []);\n\n    const generateRecs = () => {\n        return (\n          <Carousel \n            cols={5} \n            rows={1} \n            gap={5} \n            loop \n            showDots={true}\n            dotColorActive={'#64748B'}\n            hideArrow={false}\n            >\n              {recs.map((film) => (\n                <Carousel.Item key={film.rec_id}>\n                  <Tooltip \n                      title={film.title} \n                      arrow \n                      placement=\"bottom\" \n                      >\n                        <a href={`/info/${film.rec_id}`}>\n                          <img width=\"145px\" src={film.poster} style={{paddingBottom: 10}} alt=\"poster\"/>\n                        </a>\n                  </Tooltip>\n                  </Carousel.Item>\n              ))}\n          </Carousel>\n      );\n    }\n\n    const generateCast = () => {\n        return (\n            <div id=\"castList\">\n                {cast.map((cast) => (\n                    <ThemeProvider theme={themeCastButtons}>\n                    <Tooltip \n                        title={cast.character} \n                        arrow \n                        placement=\"top\" \n                        key={cast.cast_id}>\n                        <Button \n                            size=\"small\" \n                            style={{minWidth: 0, margin: 5, paddingLeft: 10, paddingRight: 10}}\n                            sx={{color: '#64748B', backgroundColor: '#f2f2f2'}}\n                        >{cast.actor}</Button>\n                    </Tooltip>\n                    </ThemeProvider>\n                ))}\n            </div>\n        );\n    }\n\n    const generateCrew = () => {\n        return (\n            <div id=\"crewList\">\n                {crew.map((crew) => (\n                    <ThemeProvider theme={themeCastButtons}>\n                    <Tooltip \n                        title={crew.job} \n                        arrow \n                        placement=\"top\" \n                        key={crew.crew_id}>\n                        <Button \n                            size=\"small\" \n                            style={{minWidth: 0, margin: 5, paddingLeft: 10, paddingRight: 10}}\n                            sx={{color: '#64748B', backgroundColor: '#f2f2f2'}}\n                        >{crew.name}</Button>\n                    </Tooltip>\n                    </ThemeProvider>\n                ))}\n            </div>\n        );\n    }\n\n    const generateGenres = () => {\n        return (\n            <div id=\"keywordsList\">\n                {genres.map((genre) => (\n                    <ThemeProvider theme={themeCastButtons}>\n                        <Button \n                            size=\"small\" \n                            style={{minWidth: 0, margin: 5, paddingLeft: 10, paddingRight: 10}}\n                            sx={{color: '#64748B', backgroundColor: '#f2f2f2'}}\n                            key={genre.genre_id}\n                        >{genre.genre}</Button>\n                    </ThemeProvider>\n                ))}\n            </div>\n        );\n    }\n\n    const generateKeywords = () => {\n        return (\n            <div id=\"keywordsList\">\n                {keywords.map((keyword) => (\n                    <ThemeProvider theme={themeCastButtons}>\n                        <Button \n                            size=\"small\" \n                            style={{minWidth: 0, margin: 5, paddingLeft: 10, paddingRight: 10}}\n                            sx={{color: '#64748B', backgroundColor: '#f2f2f2'}}\n                            key={keyword.keyword_id}\n                        >{keyword.keyword}</Button>\n                    </ThemeProvider>\n                ))}\n            </div>\n        );\n    }\n\n    const ReadMore = ({ children }) => {\n        const text = children;\n        const needReadMore = text.length > 250;\n        const [isReadMore, setIsReadMore] = useState(true);\n        const toggleReadMore = () => {\n          setIsReadMore(!isReadMore);\n        };\n        return (\n            needReadMore ? (\n            <p className=\"text\">\n                {isReadMore ? text.slice(0, 250) : text}\n                <span onClick={toggleReadMore} className=\"read-or-hide\" style={{color: '#1976d2', cursor: 'pointer'}}>\n                {isReadMore ? \"...read more\" : \" show less\"}\n                </span>\n            </p> ) : (\n                <p>{text}</p>\n            )\n        );\n      };\n\n    return (\n      <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}>\n        <div className=\"container\">\n            <h3 style={{display: \"inline\", marginRight: 10}}>{title}</h3>\n            <p className=\"text-muted\" style={{fontSize: 22, display: \"inline\"}}>({year})</p>\n            <p>Dir. {director} • {runtime} min</p>\n            <div className=\"row\">\n                <div className=\"col-4 nopadding\">\n                    <img src={poster} style={{width: 300, paddingBottom: 10}} className=\"img-fluid\" alt=\"poster\"/>\n                </div>\n                <div className=\"col\">\n                    <h6>{tagline}</h6>\n                    <p><ReadMore>{overview}</ReadMore></p>\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                    <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n                        <Tab label=\"CAST\" {...a11yProps(0)} style={{ minWidth: 0}}/>\n                        <Tab label=\"CREW\" {...a11yProps(1)} style={{ minWidth: 0}}/>\n                        <Tab label=\"GENRES\" {...a11yProps(2)} style={{ minWidth: 0}}/>\n                        <Tab label=\"KEYWORDS\" {...a11yProps(3)} style={{ minWidth: 0}}/>\n                    </Tabs>\n                    </Box>\n                    <TabPanel value={value} index={0}>\n                        {generateCast()}\n                    </TabPanel>\n                    <TabPanel value={value} index={1}>\n                        {generateCrew()}\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        {generateGenres()}\n                    </TabPanel>\n                    <TabPanel value={value} index={3}>\n                        {generateKeywords()}\n                    </TabPanel>\n                </div>\n            </div>\n        </div>\n        <div>\n            <h5 style={{ paddingLeft: 18, paddingTop: 20 }}>Similar to {title}</h5>\n            {generateRecs()}\n          </div>\n      </div>\n\n    );\n  }","/Users/annajiang/Desktop/fuck/client/src/components/firebase.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/searchList/search.js",["114"],"import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Movies from './movies';\nimport TextField from '@mui/material/TextField';\n\nclass Search extends Component {\n  state = {\n    movies: null,\n    loading: false,\n    value: ''\n  };\n\n  search = async val => {\n    this.setState({ loading: true });\n    const res = await axios(\n      `https://api.themoviedb.org/3/search/movie?query=${val}&api_key=dbc0a6d62448554c27b6167ef7dabb1b`\n    );\n    const movies = await res.data.results;\n\n    this.setState({ movies, loading: false });\n  };\n\n  onChangeHandler = async e => {\n    this.search(e.target.value);\n    this.setState({ value: e.target.value });\n  };\n\n  onClickHandler = async e => {\n    this.search(\"\");\n    this.setState({ value: \"\" });\n  };\n\n  get renderMovies() {\n    if (this.state.movies) {\n      return <Movies list={this.state.movies} />;\n    }\n  }\n\n  render() {\n    return (\n      <div style={{margin: 0}}>\n      \t{/* <div style={{marginTop: 100, marginLeft: 300, marginRight: 300}}> */}\n        {/* <input\n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          placeholder=\"Search Here\"\n        /> */}\n        <TextField\n          fullWidth\n          id=\"searchbar\"\n          variant=\"outlined\" \n          value={this.state.value}\n          onChange={e => this.onChangeHandler(e)}\n          onClick={(e) => {\n            this.onClickHandler(e);\n            // allow search again\n            if (document.getElementById('searchresultsList')) {\n              document.getElementById('searchresultsList').style.visibility = \"visible\";\n            }           \n          }}\n          placeholder=\"Add Films...\"\n          autoComplete='off'\n        />\n        <div>{this.renderMovies}</div>\n      </div>\n    );\n  }\n}\n\nexport default Search;","/Users/annajiang/Desktop/fuck/client/src/components/searchList/movies.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/search/movies.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/searchList/movie.js",[],"/Users/annajiang/Desktop/fuck/client/src/components/search/movie.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":56,"column":9,"nodeType":"121","endLine":56,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":145,"column":9,"nodeType":"121","endLine":145,"endColumn":12},{"ruleId":"122","severity":1,"message":"123","line":36,"column":6,"nodeType":"124","endLine":36,"endColumn":21,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"126","line":145,"column":6,"nodeType":"124","endLine":145,"endColumn":12,"suggestions":"127"},{"ruleId":"122","severity":1,"message":"126","line":198,"column":4,"nodeType":"124","endLine":198,"endColumn":25,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":33,"column":3,"nodeType":"131","messageId":"132","endLine":33,"endColumn":19},{"ruleId":"122","severity":1,"message":"126","line":147,"column":6,"nodeType":"124","endLine":147,"endColumn":12,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":27,"column":6,"nodeType":"124","endLine":27,"endColumn":21,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"126","line":75,"column":6,"nodeType":"124","endLine":75,"endColumn":12,"suggestions":"136"},{"ruleId":"122","severity":1,"message":"126","line":141,"column":6,"nodeType":"124","endLine":141,"endColumn":27,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":70,"column":12,"nodeType":"140","messageId":"141","endLine":70,"endColumn":19},{"ruleId":"122","severity":1,"message":"142","line":185,"column":8,"nodeType":"124","endLine":185,"endColumn":10,"suggestions":"143"},{"ruleId":"129","severity":1,"message":"130","line":34,"column":3,"nodeType":"131","messageId":"132","endLine":34,"endColumn":19},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchUserName' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has a missing dependency: 'generateTable'. Either include it or remove the dependency array.",["147"],["148"],"getter-return","Expected getter 'renderMovies' to always return a value.","FunctionExpression","expectedAlways",["149"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["150"],["151"],["152"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"156","fix":"160"},{"desc":"161","fix":"162"},{"desc":"156","fix":"163"},{"desc":"158","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [user, loading, navigate, fetchUserName]",{"range":"167","text":"168"},"Update the dependencies array to be: [generateTable, rows]",{"range":"169","text":"170"},"Update the dependencies array to be: [params.id, navigate, generateTable]",{"range":"171","text":"172"},{"range":"173","text":"170"},"Update the dependencies array to be: [user, loading, navigate]",{"range":"174","text":"175"},{"range":"176","text":"170"},{"range":"177","text":"172"},"Update the dependencies array to be: [params.id]",{"range":"178","text":"179"},[1276,1291],"[user, loading, navigate, fetchUserName]",[5080,5086],"[generateTable, rows]",[6153,6174],"[params.id, navigate, generateTable]",[5062,5068],[931,946],"[user, loading, navigate]",[2582,2588],[4166,4187],[6089,6091],"[params.id]"]